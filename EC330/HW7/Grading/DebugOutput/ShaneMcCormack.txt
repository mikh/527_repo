---+EC330 - Spring 2015 - Homework 7
%TOC%

---++_Assigned:_  Thursday, April 9
---++_Due:_  Tuesday, April 21 _at the beginning of class._

<!--
PHI1=6..15
PHI2=1..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(%WIKINAME%),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(1+$MOD(%PHI%,5))}%
-->
---+ Total Grade *[/100]*
---+ Problem 1. Binary Search Trees *[10 points]*
|  Approach   |  Running time  |
|  b  |  theta(n^2 * log(n))  |
|  c  |  theta(n^2 * log(n))  |
|  d  |  theta(n^2*log(n)*log(n)) |
---++ Explanation

Approach b: This approach will create a tree which alternates (with exclusion of the root)  from filling 2 nodes per level to 4 nodes per level, with each unique number. Once a new number is introduced, the new number will start at the most right (as it is larger) node (which will be on the first four node level of the number proceeding it) and it will follow the same pattern as the proceeding number from there, with the right child of the right-most first four node level of the number proceeding it node acting comparable to the root of the first number's pattern.

The starting height of each new number pattern will be Hs = 3*number, because it takes 3 levels per number to get to the first 4 node level (one for the each proceeding number's acting root, and 2 for the alteration from 2 nodes/level to 4), and +1 to include the root. The first number will start out at height 0, because the root does not exist yet.

The final height of each number's pattern will be Hf = (n-1)/3 + 1 + Hs, where n is the number of nodes with the same number This is because the filling pattern takes on average 3 nodes per level (as it alternates from 2 to 4 nodes). The -1 and +1 come from the number's acting root not being included in the average 3 nodes per height, and the root giving +1 height, respectively.

The height of the tree at any time in the process will equal:

Ht = (how many of the current number being inserted already inserted-1)/3+1+3*how many distinct numbers (like 1, 2, 3, etc) already inserted

Because the running time of insertion depends on the height at which the number is being inserted, the running time for inserting log(n) copies of n numbers would be equal to: 

sum(from i=1 to n, sum(from j=1 to log(n), (j-1)/3 + 1 + 3i)

Using Wolfram Alpha, this comes out to T=1/6*nlog(n)(9n+log(n)+14), or theta(n^2log(n))

Approach c: This approach simply puts all equal keys into a list at the node, instead of putting duplicates into the binary search tree. This cuts down on the height of the tree, which speeds things up a good deal. 

sum(from i=1 to n, sum(from j=1 to log(n), i)), where i represents the height of the BST.

Approach d: The worst case scenario is when the random number generator craps the bed and only gives one direction the entire time. This leads to the height being equal to the total nodes of the BST. Since insertion time into a BST is dependent on height, the run time of this approach is:

sum(from i=1 to n, sum(from j=1 to log(n), i*log(n)+j)), where i*log(n) represents the number of distinct numbers already completely added to the BST, and j represents the number of the current number already inserted into the BST
---++!! Grader comments *[/10]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Distance Graphs *[20 points]*
---++!! 2a 
|  Location   |  Driving time(Hr)  |
|  Chichen Itza, Yuc., Mexico  |  57  |
|  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  8  |
|  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  43  |
|  Statue of Liberty National Monument, Liberty Island, New York, NY  |  4  |
|  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  39  |

Does this graph exhibit the triangle inequality? 
Yes, it does. Google Maps would likely be out of business if it didn't. It wouldn't make sense to give the non-optimal directions from one place to another.
---++!! 2b
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  |  NULL  |
|  b  |  Chichen Itza, Yuc., Mexico  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |  Photonics Center,8 St Marys St, Boston, MA 02215  |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |

---++!! 2c
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  |    |
|  b  |  Chichen Itza, Yuc., Mexico  |    |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |    |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |    |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |    |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |    |

MST Edges: 

Photonics Center,8 St Marys St, Boston, MA 02215->Statue of Liberty National Monument, Liberty Island, New York, NY

Statue of Liberty National Monument, Liberty Island, New York, NY->CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada

CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada-> Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119

 Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119 -> Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico

Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico->Chichen Itza, Yuc., Mexico


---++!! 2d
---+++!! Algorithm
<VERBATIM>
Prim's algorithm using a linked list will be the most efficient for finding the MST of these complete graphs

Pseudo:

Q = all vertices                //putting all vertices into Q - a linked list theta(V)
key[all vertices] = infinity //all vertices = infinity
key[root] = 0
while Q not empty           //theta(V)
  u=extract-min(Q)          //theta(V^2)
  for each vertex adjacent to u
    if vertex is in Q and weight(u,v)<key[v]  //theta(E)
      key[v] = weight(u,v)  //theta(E)
      tree[v] = u                 //theta(V)

Total theta(V^2 + E), since we're working with a complete graph, E=~n^2
Thus asymptotic running time = theta(V^2)

</VERBATIM>
---+++!! Analysis
<VERBATIM>
See my pseudocode for analysis in the comments. It was easier to analyze it line by line that way. 

I used Prim's algorithm because it can run in V^2+E time using a linked list, whereas otherwise with Kruskal's/Boruvka's algorithm, we'd run in Elog(V) time. Elog(V) is slower because E=~V^2 in a complete graph. 

I understand that with knowing something about the edges, we could reduce the sorting of Kruskal's algorithm to constant time, but this doesn't impact the asymptotic run time, so Prim's still runs more efficiently in this case.
</VERBATIM>

---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Minimum Spanning Trees *[10 points]*
---++!! a
<VERBATIM>
O(E^2+EV)
</VERBATIM>
---++!! b
<VERBATIM>
This algorithm doesn't discriminate with which edge it starts with. If it starts on a heavy edge that shouldn't be included in the MST, it won't notice and thus will provide an incorrect MST.
</VERBATIM>
---++!! c
<VERBATIM>
O(VE)
</VERBATIM>

---++!! Grader comments *[20/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  DNA sequencing *[20 points]*

---++ 4a.  Simple case [10 points]
---+++!! i
<VERBATIM>
Describe and analyze the algorithm.
</VERBATIM>

---+++!! ii
<VERBATIM>
Do not worry about your difficulties in Mathematics. I can assure you mine are still greater.
</VERBATIM>

and

%CODE{"cpp"}%
#include <iostream>
#include <string>
#include <fstream>
#include <streambuf>
#include <vector>
using namespace std;


class Node
{
public:

	Node(int id, string value)
	{
		this->id = id;
		this->next = -1;
		this->prev = -1;
		this->value = value;
	}

	string value;
	int next;
	int prev;
	int id;

};


void printString(string* subString, int subNum)
{
	int subLength = subString[0].length();
	vector<Node> nodes;

//making an array with all the vertex
	for (int i = 0; i < subNum; i++){
		nodes.push_back(Node(i, subString[i]));
	}

//compare the suffix to another strings prefix if =, must be the next node in the graph.
	for (int i = 0; i < subNum; i++)
	{
		for (int j = 0; j < subNum; j++)
		{
			string str = nodes[i].value;
			string compare = nodes[j].value;
			if (str.substr(1, subLength-1) == compare.substr(0, subLength-1))
			{
				nodes[i].next = j;
				nodes[j].prev = i;
			}
		}
	}



//finding where the cycle starts
	int k = 0;
	int index = 0;
	for (int j = 0; j < subNum; j++)
	{
		if(nodes[j].prev == -1)
		{
			index = j;
		}
	}
	
//printing from start to end
	while (k < subNum)
	{
		string s = nodes[index].value;
		if (k == subNum-1)
			cout << s;
		else
			cout << s.at(0);
		index = nodes[index].next;
		k++;
	}
	cout<<endl;
}


int main()
{
	string subString[] = {"_Wide", "Wide_", "World", "d_Wid", "de_We", "e_Web", "ide_W", "ld_Wi", "orld_", "rld_W"};
	printString(subString, 10);
	
	ifstream raw("quotes.txt", ios::in|ios::binary);
	string whole;
	if(raw)
	{
		raw.seekg(0, ios::end);
		whole.resize(raw.tellg());
		raw.seekg(0, ios::beg);
		raw.read(&whole[0], whole.size());
		raw.close();
	}
	string quoteStrings[79]; 
	int i = 1;
	int j = 0;
	while (i < whole.length())
	{
		string s = whole.substr(i, 5);
		quoteStrings[j] = s;
		j++;
		i = i + 8;
	}

	printString(quoteStrings, j);
	return 0;
}
%ENDCODE%

---++ 4b.  Complications [5 points]
<VERBATIM>
see attachtwex code
</VERBATIM>

---++ 4c.  More complications [5 points]
---+++!! i
<VERBATIM>
Descrbie and analyze the modification.
</VERBATIM>
---+++!! ii
<VERBATIM>
Descrbie and analyze the modification.
</VERBATIM>


---+++!! Grader comments
<VERBATIM>Question 4 Results:

Total Grade: 10

	10        		
	0         		
	0         		


</VERBATIM>

---+ Problem 5.  Traveling salesperson *[20 points]*
Provide a _short_ explanation of your approach here and the resulting cycle weight you found.

Also attach your code as =problem5.zip=, containing at least these files
   * =Makefile= :  running "make all" should compile your code to an executable =test=, which, when run, should produce your solution.
   * =result.txt= : the result file with one vertex name per line denoting the vertices of your cycle


---+++!! Grader comments
<VERBATIM>Question 5 Results:

Total Grade: 0

	0         		Grades from submission
	0         		


</VERBATIM>

