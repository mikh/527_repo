---+EC330 - Spring 2015 - Homework 7
%TOC%

---++_Assigned:_  Thursday, April 9
---++_Due:_  Tuesday, April 21 _at the beginning of class._

<!--
PHI1=6..15
PHI2=1..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(%WIKINAME%),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(1+$MOD(%PHI%,5))}%
-->
---+ Total Grade *[/100]*
---+ Problem 1. Binary Search Trees *[10 points]*

|  Approach   |  Running time  |
|  b  | <latex>   \Theta(n log(n) </latex>  |
|  c  | <latex> \Theta(1) </latex>  |
|  d  |<latex> \Theta(log (n) </latex>  |
---++ Explanation
<VERBATIM>
Provide explanation for partial credits
</VERBATIM>

---++!! Grader comments *[/10]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Distance Graphs *[20 points]*
---++!! 2a 
|  Location   |  Driving time(Hr)  |
|  Chichen Itza, Yuc., Mexico  |  57  |
|  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  8  |
|  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  43  |
|  Statue of Liberty National Monument, Liberty Island, New York, NY  |  4  |
|  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  39  |

Does this graph exhibit the triangle inequality? 

yes, the graph exhibits triangle inequality
---++!! 2b


PHO--> Statue of Liberty (4)
PHO --> CN Tower(8)
Statue of Liberty --> Mandalay (36)
CN Tower --> Pyramid of the Sun (38)
CN Tower --> Mexico (53)
---++!! 2c
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  | a, e |
|  b  |  Chichen Itza, Yuc., Mexico  |   c |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  b, d |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  | c  |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  | a, f   |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  | e   |

---++!! 2d
---+++!! Algorithm
<VERBATIM>
Describe your algorithm here. Pseudocode is preferred.
</VERBATIM>

KRUSKAL(G):
 A = &#8709;
 foreach v &#8712; G.V:
    MAKE-SET(v)
 foreach (u, v) ordered by weight(u, v), increasing:
    if FIND-SET(u) &#8800; FIND-SET(v):
       A = A &#8746; {(u, v)}
       UNION(u, v)
 return A
---+++!! Analysis
<VERBATIM>
Descrbie and analyze your algorithm.
</VERBATIM>

I would use Kruskals algorithm because its runtime is <latex> \Theta(log(V) </latex>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Minimum Spanning Trees *[10 points]*
---++!! a
<VERBATIM>
Counterexample or Running time
</VERBATIM>

Yes, this does produce a min spanning tree (MST) with a runtime of  <latex> \Theta(E^2) </latex>
---++!! b
<VERBATIM>
Counterexample or Running time
</VERBATIM>

This will not always produce a MST. It will proceed a spanning true though.

  this code can be done using a disjoint set operations. We are just choosing vertices without making any comparison
---++!! c
<VERBATIM>
Counterexample or Running time
</VERBATIM>

This will not always produce a MST. It will proceed a spanning true though.
Once the code is run on any edge in the graph that isn't part of T already, it will choose the max weighted edge.
---++!! Grader comments *[13/20]*
<VERBATIM>
Last algorithm does produce correct MST.
</VERBATIM>

---+ Problem 4.  DNA sequencing *[20 points]*

---++ 4a.  Simple case [10 points]
---+++!! i
<VERBATIM>
Describe and analyze the algorithm.
</VERBATIM>

---+++!! ii
<VERBATIM>
Provide your result here.
</VERBATIM>

and

%CODE{"cpp"}%
// paste your code here

%ENDCODE%

---++ 4b.  Complications [5 points]
<VERBATIM>
Describe and analyze the modification
</VERBATIM>

---++ 4c.  More complications [5 points]
---+++!! i
<VERBATIM>
Descrbie and analyze the modification.
</VERBATIM>
---+++!! ii
<VERBATIM>
Descrbie and analyze the modification.
</VERBATIM>


---+++!! Grader comments
<VERBATIM>Question 4 Results:

Total Grade: 0

	0         		
	0         		
	0         		


</VERBATIM>

---+ Problem 5.  Traveling salesperson *[20 points]*
Provide a _short_ explanation of your approach here and the resulting cycle weight you found.

Also attach your code as =problem5.zip=, containing at least these files
   * =Makefile= :  running "make all" should compile your code to an executable =test=, which, when run, should produce your solution.
   * =result.txt= : the result file with one vertex name per line denoting the vertices of your cycle


---+++!! Grader comments
<VERBATIM>Question 5 Results:

Total Grade: 0

	0         		Grades from submission
	0         		


</VERBATIM>

