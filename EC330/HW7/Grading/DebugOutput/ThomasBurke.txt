---+EC330 - Spring 2015 - Homework 7
%TOC%

---++_Assigned:_  Thursday, April 9
---++_Due:_  Tuesday, April 21 _at the beginning of class._

<!--
PHI1=6..15
PHI2=1..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(%WIKINAME%),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(1+$MOD(%PHI%,5))}%
-->
---+ Total Grade *[/100]*
---+ Problem 1. Binary Search Trees *[10 points]*
|  Approach   |  Running time  |
|  b  |  <latex> \theta (nlog^{2}(n)) </latex>  |
|  c  |  <latex> \theta (1) </latex>  |
|  d  |  <latex> \theta (nlogn) </latex>  |
---++ Explanation
<VERBATIM>
b.) when just inserting n elements into the tree it was easy to see that was nlogn worst case time so i simply changed that to fit the new requirement
c.)will take constant time for n elements so i figure it will do the same with the extra insertions
d.) would take n worst case time for inserting n elements so inserting n number of logn elements should take nlogn time
</VERBATIM>

---++!! Grader comments *[/10]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Distance Graphs *[20 points]*
---++!! 2a 
|  Location   |  Driving time(Hr)  |
|  Chichen Itza, Yuc., Mexico  |  56  |
|  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  8  |
|  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  42  |
|  Statue of Liberty National Monument, Liberty Island, New York, NY  | 3   |
|  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  37  |

Does this graph exhibit the triangle inequality? yes, if you include traffic then rounding will make the graph not exhibit the triangle inequality
---++!! 2c
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  |   0 (the root)  |
|  b  |  Chichen Itza, Yuc., Mexico  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |  Photonics  |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |
---++!! 2c
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  |   0 (the root)  |
|  b  |  Chichen Itza, Yuc., Mexico  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |  Photonics  |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |
---++!! 2d
---+++!! Algorithm
<VERBATIM>
 Input: A connected graph G whose edges have distinct weights
  Initialize a forest T to be a set of one-vertex trees, one for each vertex of the graph.
  While T has more than one component:
    For each component C of T:
      Begin with an empty set of edges S
      For each vertex v in C:
        Find the cheapest edge from v to a vertex outside of C, and add it to S
      Add the cheapest edge in S to T
  Output: T is the minimum spanning tree of G.

citation: http://en.wikipedia.org/wiki/Bor&#367;vka's_algorithm
</VERBATIM>
---+++!! Analysis
<VERBATIM>
find the lightest adjacent edge for every v can be done in O(E) without sorting

after all of these edges are found we will relabel the endpoints of the ends so they refer to the new vertices in the  new graph (G'), this can be down in O (E) time with DFS to find connected components

after that step we can confirm that each vertex in G' corresponds to at least two vertices in the original graph, so the # of vertices in G' <= V/2
so if Boruvka's is called k times we will have (V/2)^k>=# vertices in G' so worst case we'll have log (V) iterations

therefore making a total runtime of O(E log(V))
</VERBATIM>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Minimum Spanning Trees *[10 points]*
---++!! a
<VERBATIM>
this finds a MST so the tightest asymptotic runtime is O((E^2)+Ev)

the sort on the edges can be done in O(ElogE)==O(ElogV) time
then using DFS in line 4 will get you the final answer
</VERBATIM>
---++!! b
<VERBATIM>
this algorithm simply finds a spanning tree so it will just pick edges that don't create a cycle arbitrarily
\,/, and - are edges, # are weights , letters are vertices


          5
    b--------c
 1 /        -/ \  41
  /  -----/ 8    \     22
 /  /             d----------e
a-------f------/
     33     92
</VERBATIM>
---++!! c
<VERBATIM>
this will create a MST in O(EV) time

line 3 will take constant time
line 4 will take O ( V ) time with DFS
liner search on the edges will take  O ( V) time because the number of edges in T is at most O (V)
line 6 can be done using a search on a adjacency list in  O ( V) time
and since the loop will run E times as its upper limit we can find the runtime to be  O (VE) time
</VERBATIM>
---++!! Grader comments *[20/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  DNA sequencing *[20 points]*

---++ 4a.  Simple case [10 points]
---+++!! i
<VERBATIM>
Describe and analyze the algorithm.
</VERBATIM>

---+++!! ii
<VERBATIM>
Provide your result here.
</VERBATIM>

and

%CODE{"cpp"}%
// paste your code here

%ENDCODE%

---++ 4b.  Complications [5 points]
<VERBATIM>
Describe and analyze the modification
</VERBATIM>

---++ 4c.  More complications [5 points]
---+++!! i
<VERBATIM>
Descrbie and analyze the modification.
</VERBATIM>
---+++!! ii
<VERBATIM>
Descrbie and analyze the modification.
</VERBATIM>


---+++!! Grader comments
<VERBATIM>Question 4 Results:

Total Grade: 0

	0         		
	0         		
	0         		


</VERBATIM>

---+ Problem 5.  Traveling salesperson *[20 points]*
Provide a _short_ explanation of your approach here and the resulting cycle weight you found.

Also attach your code as =problem5.zip=, containing at least these files
   * =Makefile= :  running "make all" should compile your code to an executable =test=, which, when run, should produce your solution.
   * =result.txt= : the result file with one vertex name per line denoting the vertices of your cycle


---+++!! Grader comments
<VERBATIM>Question 5 Results:

Total Grade: 0

	0         		Grades from submission
	0         		


</VERBATIM>

