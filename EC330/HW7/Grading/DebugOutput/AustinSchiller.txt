---+EC330 - Spring 2015 - Homework 7
%TOC%

---++_Assigned:_  Thursday, April 9
---++_Due:_  Tuesday, April 21 _at the beginning of class._

<!--
PHI1=6..15
PHI2=1..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(%WIKINAME%),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(1+$MOD(%PHI%,5))}%
-->
---+ Total Grade *[/100]*
---+ Problem 1. Binary Search Trees *[10 points]*
|  Approach   |  Running time  |
|  b  |    |        n^2*log^2(n)

|  c  |    |         n^2*log(n)

|  d  |    |        n^2*log^2(n)
---++ Explanation
<VERBATIM>
b) for every other element we add a new row. This means n^2*log^2(n) run time.

c) for each insert, we add a new level. Each insert will take on average nlog(n) time. For each level we have to multiply by n. This gives n^2log(n).

d)d is similar to b) but with randomness.

</VERBATIM>

---++!! Grader comments *[/10]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Distance Graphs *[20 points]*
---++!! 2a 
|  Location   |  Driving time(Hr)  |
|  Chichen Itza, Yuc., Mexico  |  57 hrs  |
|  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  8.75 hrs  |
|  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  44hrs  |
|  Statue of Liberty National Monument, Liberty Island, New York, NY  |  4.12 hrs  |
|  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  40hrs   |

Does this graph exhibit the triangle inequality? 
yes
---++!! 2b
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  |  {A,E}  |
|  b  |  Chichen Itza, Yuc., Mexico  |  {B,D}  |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  {C,E},{C,F}  |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  {D,B},{D,F}  |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |  {E,A}, {E,C}  |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  {F,C},{F,D}  |

note * for 2b and 2c there is no predecessor matrix that forms. I included an edge list instead
---++!! 2c
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  |  {A,E}  |
|  b  |  Chichen Itza, Yuc., Mexico  |  {B,D}  |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  {C,E},{C,F}  |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  {D,B},{D,F}  |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |  {E,A}, {E,C}  |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  {F,C},{F,D}  |

---++!! 2d
---+++!! Algorithm
<VERBATIM>
create a forest T(a set of trees), where each vertex in the graph is a separate tree
create a set S containing all the edges in the graph
while S is nonempty and T is not yet spanning 
                        { - remove an edge with minimum weight from S
                           -if that edge connects two different trees, then add it to the forest, combining two 
                           trees into a single tree, otherwise discard that edge.
                         }
</VERBATIM>
---+++!! Analysis
<VERBATIM>
O(Elog(V)) run time for a sparse graph and O(E) for a dense graph
This just just a variation of kruskals algorithm found from the dit.ie website. 

if the graph is dense, then Prim's algorithm with an adj matrix would be more efficient.
</VERBATIM>

---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Minimum Spanning Trees *[10 points]*
---++!! a
<VERBATIM>
Valid

Running time: &#920;(E*lg(E))

Takes lg(E) time to delete an Edge, and this is done E times.
</VERBATIM>
---++!! b
<VERBATIM>
Invalid

The algorithm looks at each edge in an arbitrary order and checks if T has any cycles. If you start with the heaviest edge in a graph, it will include it in T, even if it is not part of the minimum spanning tree and there are lighter edges to choose from.
</VERBATIM>
---++!! c
<VERBATIM>
Valid

Since T always checks if there is a cycle, it will always create a spanning tree. Since T always checks for minimum weights, it will always create a minimum spanning tree.

Runtime is &#920;(E*lg(V))

Inserting/Deleting an edge in a queue takes lg(V) time, and this is done E times.
</VERBATIM>

---++!! Grader comments *[16/20]*
<VERBATIM>
First running time is O(E^2); last is O(E(V+E)).
</VERBATIM>

---+ Problem 4.  DNA sequencing *[20 points]*

---++ 4a.  Simple case [10 points]
---+++!! i
<VERBATIM>
To find a string from length 5 substrings using the pattern above, we can first take the first string (or find a capital letter if we are looking at a sentence) and use that as the starting point. We can then look at the last 4 characters of the first string and try to match it to the first 4 characters of another string in the list. Once a match is found, we can add the last character of the second string to the first string and repeat the process. Next we would be looking at the last 4 characters of the 2nd string and trying to find a match to the first 4 characters of another string in the list. We repeat this until there are no more matches!

Without knowing the starting substring or at least the first character, it is impossible to output with 100% certainty a string made from 5 character substrings using the pattern above. The string will be in the correct order, it will just not necessarily start at the point that is supposed to. 
</VERBATIM>

---+++!! ii
<VERBATIM>
Output : Gravitation cannot be held responsible for people falling in love.
</VERBATIM>

Code : 

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cctype>
#include <algorithm>

using namespace std;

int main()
{
    vector<string> strings;
    vector<string> stringscopy;
    vector<string> results;
    string temp;
    string out;
    string swapper;
    ifstream file;
    vector<int> indexes;
    file.open("reads1.txt");

    if(file.is_open())
       {
                getline (file,temp);

                    for(int xx = 0; xx< temp.length(); xx++)
                    {
                        if(temp[xx] == '[')
                        {
                            for(int mm = 1; mm <= 5; mm++) // put all 5 character elements into the vector strings
                            {
                                out += temp[xx+mm];
                            }
                          // cout << out << endl;
                            strings.push_back(out);

                            out = "";
                        }
                    }

       }
      for(int dd = 0; dd <strings.size(); dd++) // if there are two substrings with the same first 4 characters, swap them
       {
           for(int rr = 0; rr<strings.size(); rr++)
           {
               if(strings[dd].substr(0,4)== strings[rr].substr(0,4) && strings[dd] != strings[rr])
               {
                    for(int uu = 0; uu<indexes.size(); uu++)
                    {

                         if(dd == indexes[uu])
                         {

                            iter_swap(strings.begin() + dd, strings.begin() + rr);
                         }
                    }
                    indexes.push_back(rr);


               }

           }
       }
       stringscopy = strings;
    file.close();
    string finalout;
    //string laststring;
    vector <string> test;
    vector<string> ending;
    vector<string> tempp;
    vector<string> laststring;
    int counter =0;
    bool next = true;
    for(int ii = 0; ii < strings.size(); ii++)
    {
        if(isupper(strings[ii][0])) // start the search by looking for a 5 character string starting with a capital letter
        {
            finalout+=strings[ii];
            test.push_back(finalout);
            laststring.push_back( strings[ii]);
            ending.push_back( laststring[0].substr(1,5));
            tempp.push_back(laststring[0]);
           // cout << laststring << endl;


            while(next)
            {
                next = false;
                counter = 0;


                    for(int mm = 0; mm < stringscopy.size(); mm++)
                        {
                            for(int xx =0; xx<tempp.size(); xx++ )
                            {
                                if(ending[xx] == stringscopy[mm].substr(0,4) && laststring[xx]!= stringscopy[mm] )
                                    // if the last 4 chars of the first string == the first 4 characters of the 2nd string
                                {
                                 //   cout << ending[xx] << " " << stringscopy[mm] << endl; // for debugging


                                    finalout+= stringscopy[mm].substr(4,5);
                                    laststring[xx] = stringscopy[mm];

                                    stringscopy.erase(stringscopy.begin() + mm); // erase the element from the array so that there are no repeats
                                    next = true;
                                    counter ++;



                                }
                            }


                        }
                        for(int zz = 0; zz < tempp.size(); zz++)
                        {
                            ending[zz] = laststring[zz].substr(1,5); // loop through the next ending
                        }

            }
        if (!finalout.empty()) results.push_back(finalout);
        }
}
    cout << results[0]<< endl;

    return 0;
}

%ENDCODE%

---++ 4b.  Complications [5 points]

If the length of the substrings  are not 5, we can just compare more (if the length of the substrings > 5) or less (if the length of the substrings < 5) characters than before. For example, if the first substring was length 6 and the second substring was length 8, we could look at the smaller of the two, in this case the length 6 substring, and compare length of the smaller -1 (6-1) characters of each. In this case, we would be looking at the last 5 characters of the length 6 substring and the first 5 characters of the length 8 substring. If it is a match, we add all of the noncompared characters of the length 8 substring.If the second substring was smaller, we would just compare it's length-1 characters and do the same process.

---++ 4c.  More complications [5 points]
---+++!! i
<VERBATIM>
Descrbie and analyze the modification.
</VERBATIM>
---+++!! ii
<VERBATIM>
Descrbie and analyze the modification.
</VERBATIM>


---+++!! Grader comments
<VERBATIM>Question 4 Results:

Total Grade: 15

	10        		
	5         		
	0         		


</VERBATIM>

---+ Problem 5.  Traveling salesperson *[20 points]*
Provide a _short_ explanation of your approach here and the resulting cycle weight you found.

98390 was Jeff Chen and my cycle weight

The code uses Prim's algorithm (nearest neighbor) to find the minimum spanning tree. From "Map.txt", all starting nodes, ending nodes, and distances are stored in three separate vectors. The code goes through each city (starting with ETCW) and finds its closest neighbor. It then deletes visited cities from the map. This is done for the next city, and so on and so forth. The last city is then connected back to ETCW.


---+++!! Grader comments
<VERBATIM>Question 5 Results:

Total Grade: 20

	15        		Grades from submission
	5         		


</VERBATIM>

