---+EC330 - Spring 2015 - Homework 7
%TOC%

---++_Assigned:_  Thursday, April 9
---++_Due:_  Tuesday, April 21 _at the beginning of class._

<!--
PHI1=6..15
PHI2=1..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(%WIKINAME%),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(1+$MOD(%PHI%,5))}%
-->
---+ Total Grade *[/100]*
---+ Problem 1. Binary Search Trees *[10 points]*
|  Approach   |  Running time  |
|  b  |  (n^2)*log(n)*lg(log(n))   |
|  c  |  n^2*log(n)  |
|  d  |   (n*log(n))^2  |
---++ Explanation
<VERBATIM>
Provide explanation for partial credits
</VERBATIM>

---++!! Grader comments *[/10]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Distance Graphs *[20 points]*
---++!! 2a 
|  Location   |  Driving time(Hr)  |
|  Chichen Itza, Yuc., Mexico  |  57  |
|  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  8  |
|  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  43   |
|  Statue of Liberty National Monument, Liberty Island, New York, NY  |  4  |
|  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  40  |

Does this graph exhibit the triangle inequality? 
yes it does! all triangles formed do abide by the property of A<=B+C where A,B,C are sides of the triangle.
---++!! 2b
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  |  SRC  |
|  b  |  Chichen Itza, Yuc., Mexico  |  d  |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  | a or e   |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  f   |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |  a   |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  c  |
MST edges: (a,e) , (c,e) , (a,c) , (b,d) , (c,f)

---++!! 2c
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  |  SRC  |
|  b  |  Chichen Itza, Yuc., Mexico  |  d  |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  a or e  |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  f  |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |  a  |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  c   |

---++!! 2d
---+++!! Algorithm
<VERBATIM>
I dont think i can come up with a better algorithm than Kruskal or Prim so i would use either one of those.
KRUSKAL(G):
A = does not equal 0;
 for v that is an element of G.V:
    MAKE-SET(v)
 for (u, v) ordered by weight(u, v), increasing:
    if FIND-SET(u) != FIND-SET(v):
       A = A + {(u, v)}
       UNION(u, v)
 return A

Kruskal pseudocode (used wikipedia as template)

</VERBATIM>
---+++!! Analysis
<VERBATIM>
Runtime for Kurskal is O(E*log(V))
</VERBATIM>

---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Minimum Spanning Trees *[10 points]*
---++!! a
<VERBATIM>
This algorithm does produce a minimum spanning tree. The running time for the sort on edges can be done in O(E*lg(E)) = O(E*lg(V)) time. Using a DFS in order to determine connectivity would increase
the running time to O(E*lg(V) +E(V+E)) = O((E^2) +(E*V)).
</VERBATIM>
---++!! b
<VERBATIM>
This Algorithm produces a spanning tree but not necessarily one that is a minimum spanning tree. Since edges are taken in arbitrary order, this would fail for any tree whose edge list was not necessarily sorted since the only
checking that is done in this algorithm is to make sure there are no cycles. It does not necessarily check for the minimum paths.
</VERBATIM>
---++!! c
<VERBATIM>
This algorithm does produce a minimum spanning tree. Line 3= O(1). Line 4,5,6 can be done in O(V) time and the for loop goes through whole adjacency list so it is done in O(E) time. 
This gives the algorithm a total run time of O(E*V).
</VERBATIM>

---++!! Grader comments *[20/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  DNA sequencing *[20 points]*

---++ 4a.  Simple case [10 points]
---+++!! i
<VERBATIM>
My algorithm finds the capital letter and sets this as the beginning of the phrase. Then goes on and compares the rest of the first four characters of every string with the last 4 characters of the previous correct one. 
</VERBATIM>

---+++!! ii
<VERBATIM>
Reading, after a certain age, diverts the mind too much from its creative pursuits.
</VERBATIM>

and

%CODE{"cpp"}%
#include <iostream>
#include <fstream>
#include <vector>
#include <cctype>
#include <stdlib.h>
#include <string>

using namespace std;

int main()
{
	vector<string> smallstrings;
	string Input;
	string message;
	ifstream inputFile;
	ifstream FormFile;
	inputFile.open("file.txt");
	FormFile.open("Newfile.txt");
	system("grep -o '[a-zA-Z., ]\\{4\\}.' file.txt >> Newfile.txt ");
	inputFile.close();

	if (FormFile.is_open())
	{
		while (getline(FormFile, Input))
		{
			smallstrings.push_back(Input);
		}
	}
	FormFile.close();

	// Finding Capitalized letter (Theoretically beginning of message)
	int i = 0;
	do
	{
		string current = smallstrings[i];
		if (isupper(current[0]) == true)
		{
			message = current.substr(0, 5);
		}
		i++;

	} while (i < smallstrings.size());

	// Check for period and combine rest of message
	while (message[message.size()] != '.')
	{
		string FourChars = message.substr(message.size() - 4, 4);
		cout << FourChars << endl;
		int i = 0;
		do
		{
			string current = smallstrings[i];
			if ((current[3] == FourChars[3]) && (current[2] == FourChars[2]) && 
				(current[1] == FourChars[1]) && (current[0] == FourChars[0]))
			{
				message = current[4] + message;
			}
			FourChars = message.substr(message.size() - 4, 4);
			i++;
		} while (i < smallstrings.size());

		cout << "Message: " << message << endl;
	}
	cout << message << endl;
	return 0;
}
%ENDCODE%

---++ 4b.  Complications [5 points]
<VERBATIM>
For variable length strings, one would have to read each line into a string then push it to a vector. One would then measure the length of the string last added and would perform character matching based on the length as well. This has the limitation that it may not work
with very small substrings. The runtime is O(n^2).
</VERBATIM>

---++ 4c.  More complications [5 points]
---+++!! i
<VERBATIM>
1) Read text file
2) Use the <map> library to store contents of file.
3) As samples are being stored, find one which could possibly be the next one and put it in the next index
4) Map function: DNA[current] = nextValue
5) If there are no further values assign white space.
6) Use a while loop to iterate through the map and construct the sequence. 
7) If there is an index with no value, use value that has white space in it.
8) String match the segments to see if any identical ones are found. If this is the case map to the value.
9) Keep mapping DNA sequence until all are done.
</VERBATIM>
---+++!! ii
<VERBATIM>
1) Read text file
2) Use the <map> library to store contents of file.
3) Store index values into vector for comparison of doubles later.
4) As samples are being stored, find one which could possibly be the next one and put it in the next index
5) Map function: DNA[current] = nextValue
6) While indices are being stored, compare them to vector to see if there is repetition. 
7) If the index is repeated get rid of it and continue.
8) Use a while loop to iterate through the map and construct the sequence. 
9) Keep mapping DNA sequence until all are done.
</VERBATIM>


---+++!! Grader comments
<VERBATIM>Question 4 Results:

Total Grade: 20

	10        		
	5         		
	5         		


</VERBATIM>

---+ Problem 5.  Traveling salesperson *[20 points]*
Provide a _short_ explanation of your approach here and the resulting cycle weight you found.

Also attach your code as =problem5.zip=, containing at least these files
   * =Makefile= :  running "make all" should compile your code to an executable =test=, which, when run, should produce your solution.
   * =result.txt= : the result file with one vertex name per line denoting the vertices of your cycle


---+++!! Grader comments
<VERBATIM>Question 5 Results:

Total Grade: 0

	0         		Grades from submission
	0         		


</VERBATIM>

