---+EC330 - Spring 2015 - Homework 7
%TOC%

---++_Assigned:_  Thursday, April 9
---++_Due:_  Tuesday, April 21 _at the beginning of class._

<!--
PHI1=6..15
PHI2=1..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(%WIKINAME%),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(1+$MOD(%PHI%,5))}%
-->
---+ Total Grade *[/100]*
---+ Problem 1. Binary Search Trees *[10 points]*
|  Approach   |  Running time  |
|  b  |  n^2*log(n)  |
|  c  |  n^2*log(n)  |
|  d  |  n^2*log(n)*log(n)  |
---++ Explanation
<VERBATIM>

c: It takes n  time to find the place in the BST where the element will go, constant time to insert into the list. There are log(n) copies of each number to be inserted, and n total numbers.

d: For worst case, all the nodes could always be going on the right/left. So, for each number you add, the height would increase by logn. Since there are n numbers, the height would end up being nlogn. You have to perform n insertions, so that brings it up to n^2logn time. You have to insert logn copies of each number, so it becomes n^2 logn logn
</VERBATIM>

---++!! Grader comments *[/10]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Distance Graphs *[20 points]*
---++!! 2a 
|  Location   |  Driving time(Hr)  |
|  Chichen Itza, Yuc., Mexico  | 56 |
|  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  8  |
|  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  42  |
|  Statue of Liberty National Monument, Liberty Island, New York, NY  |  3  |
|  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  37  |

Does this graph exhibit the triangle inequality? 
Yes

Taken on Tuesday the 14th at 4am
---++!! 2b
Photonics->Statue of Liberty Monument

Statue of Liberty Monument -> CN Tower

CN Tower-> Mandalay Bay

Mandalay Bay -> Pyramid of the Sun

Pyramid of the Sun -> Chichen Itza
---++!! 2c
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  |  Null  |
|  b  |  Chichen Itza, Yuc., Mexico  |  d  |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  e  |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  f  |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |  a  |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  | c |

---++!! 2d
---+++!! Algorithm
<VERBATIM>
Kruskal's algorithm with disjoint-set forests with union by rank.

KRUSKAL(G):
1 A = Empty;
2 for each v in G.V:
3    MAKE-SET(v)
4 for each (u, v) ordered by weight(u, v), increasing:
5    if FIND-SET(u) != FIND-SET(v):
6       A = A  union {(u, v)}
7       UNION(u, v)
8 return A

</VERBATIM>
---+++!! Analysis
<VERBATIM>
O(E log E) time. Kruskal's algorithm finds the smallest possible edge in the graph at each step which doesn't result in a cycle.
</VERBATIM>

---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Minimum Spanning Trees *[10 points]*
---++!! a
<VERBATIM>
O(E(E+V))
</VERBATIM>
---++!! b
<VERBATIM>
This will generate a spanning tree, but it won't necessarily be the minimum tree because it is picking arbitrary edges(as evidenced by line 2).

Vertices a,b,c,d
a-b=1
b-c=3
c-d=3
a-d=1

The code could generate a spanning tree a-b,b-c, and c-d.
The MST is a-b,b-c, and a-d.
</VERBATIM>
---++!! c
<VERBATIM>
O(E*V)
</VERBATIM>

---++!! Grader comments *[20/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  DNA sequencing *[20 points]*

---++ 4a.  Simple case [10 points]
---+++!! i
<VERBATIM>

Read in all the words in the file into a vector of strings.

Create an empty string called answer.

Append the first word from the vector to the answer string, and delete the word from the vector.

Iterate through the vector while the vector still has elements, comparing the first four characters of each word from the vector to the last four characters from the answer string. If they match,  append the last character of the word to the answer string and delete the word from the vector.If they don't match, compare the last four characters of each word to the
 first four characters of the string. If they match, add the first character of the word to the beginning of the answer string and delete the word from the vector.
If there is still not match, move onto the next word.

O(n^2) 
</VERBATIM>

---+++!! ii
<VERBATIM>
Reading, after a certain age, diverts the mind too much from its creative pursuits.
</VERBATIM>

and

%CODE{"cpp"}%
#include<iostream>
#include<fstream>
#include<string>
#include<vector>
#include<ctype.h>

using namespace std;

int main()
{
	string line;
	size_t pos=0;
	string delimiter="[";
	ifstream ifile;
	vector <string> strings;
	
	ifile.open("reads3.txt");
	getline(ifile,line);
	ifile.close();
    
	while((pos=line.find(delimiter))!=string::npos)
	{
		strings.push_back((line.substr(0,pos)).substr(0,5));
		line.erase(0,pos+delimiter.length());
	}
	
	ifstream sfile;
	string file,end;
	sfile.open("reads3.txt");
	getline(sfile,file);
	sfile.close();
	
	end.clear();
	end+=file[file.size()-7];
	end+=file[file.size()-6];
	end+=file[file.size()-5];
	end+=file[file.size()-4];
	end+=file[file.size()-3];
	strings.push_back(end);
	
	string answer;	
	answer=strings[1];	
	strings.erase(strings.begin());

	while(strings.size())
	{
		for(int ii=0;ii<strings.size();ii++)
		{
			if(strings[ii][0]==answer[answer.size()-4] && strings[ii][1]==answer[answer.size()-3] && strings[ii][2]==answer[answer.size()-2] && strings[ii][3]==answer[answer.size()-1])
			{
				answer+=strings[ii][4];
				strings.erase(strings.begin()+ii);
			}
			else if(strings[ii][1]==answer[0] && strings[ii][2]==answer[1] && strings[ii][3]==answer[2] && strings[ii][4]==answer[3])
			{
				answer=strings[ii][0]+answer;
				strings.erase(strings.begin()+ii);
			}
		}
		if(strings.size()==1)
			break;
	}
	cout<<answer<<endl;

	return 0;
}

%ENDCODE%

---++ 4b.  Complications [5 points]
<VERBATIM>
Read in all the words in the file into a sorted (by length of string) vector of strings.

Create an empty string called answer.

Append the largest from the vector to the answer string, and delete the word from the vector.

Iterate through the vector while the vector still has elements, comparing the first l-1(where l is the length of the word) characters of 
the longest word from the vector to the last l-1 characters from the answer string. If they match,  append the last character of the word
 to the answer string and delete the word from the vector.If they don't match, compare the last l-1 characters of each word to the first l-1 
characters of the string. If they match, add the first character of the word to the beginning of the answer string and delete the word from the vector.
If there is still not match, move onto the next word.

Still O(N^2)
</VERBATIM>

---++ 4c.  More complications [5 points]
---+++!! i
<VERBATIM>
Read in all unique words(so you ignore any repeated words) in the file into a sorted (by length of string) vector of strings.

Create an empty string called answer.

Append the largest from the vector to the answer string. 

Iterate through the vector while the vector still has elements, comparing the first l-1 characters of the longest word from the vector to the last l-1 characters from the answer string. If they match,  append the last character of the word to the answer string and delete the word from the vector. If they don't match, compare the last l-1 characters of each word to the first l-1 characters of the string. If they match, add the first character of the word to the beginning of the answer string and delete the word from the vector.
If there is still not match, move onto the next word.

If There are no matches whatsoever, start over again, with the next largest word from the vector instead.

Worst case is O(n^2)

</VERBATIM>
---+++!! ii
<VERBATIM>
Descrbie and analyze the modification.
</VERBATIM>


---+++!! Grader comments
<VERBATIM>Question 4 Results:

Total Grade: 18

	10        		
	5         		
	3         		


</VERBATIM>

---+ Problem 5.  Traveling salesperson *[20 points]*

Initially I tried implementing Prim's algorithm, but that was running too slowly. So, instead of trying that, I wrote a greedy program
which starts at node ETCW. I have a vertex class which contains a vector of outgoing edges as well as boolean value for visited.
I defined an edge class containing the dest node, and length of edge. I find the shortest edge, traverse to the next vertex, find the shortest edge from that vertex, 
and so on...

Also attach your code as =problem5.zip=, containing at least these files
   * =Makefile= :  running "make all" should compile your code to an executable =test=, which, when run, should produce your solution.
   * =result.txt= : the result file with one vertex name per line denoting the vertices of your cycle


---+++!! Grader comments
<VERBATIM>Question 5 Results:

Total Grade: 20

	15        		Grades from submission
	5         		


</VERBATIM>

