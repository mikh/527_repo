---+EC330 - Spring 2015 - Homework 7
%TOC%

---++_Assigned:_  Thursday, April 9
---++_Due:_  Tuesday, April 21 _at the beginning of class._

<!--
PHI1=6..15
PHI2=1..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(%WIKINAME%),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(1+$MOD(%PHI%,5))}%
-->
---+ Total Grade *[/100]*
---+ Problem 1. Binary Search Trees *[10 points]*
|  Approach   |  Running time  |
|  b  |  O((long n)^2)  |
|  c  |  O(n^2)  |
|  d  |  O(n^2)  |
---++ Explanation
<VERBATIM>
Provide explanation for partial credits
</VERBATIM>

---++!! Grader comments *[/10]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Distance Graphs *[20 points]*
---++!! 2a 
|  Location   |  Driving time(Hr)  |
|  Chichen Itza, Yuc., Mexico  | 56   |
|  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  | 9   |
|  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  43  |
|  Statue of Liberty National Monument, Liberty Island, New York, NY  |  4  |
|  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  40  |

Does this graph exhibit the triangle inequality? 

Yes
---++!! 2b
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  |  5  |
|  b  |  Chichen Itza, Yuc., Mexico  | 4   |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |  1  |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  6  |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |  NULL  |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  3  |

---++!! 2c
|  Index  |  Location   |  &pi;  |
|  a  |  Photonics Center,8 St Marys St, Boston, MA 02215  |  5  |
|  b  |  Chichen Itza, Yuc., Mexico  | 4   |
|  c  |  CN Tower, 301 Front Street West, Toronto, ON M5V 2T6, Canada  |   1 |
|  d  |  Pyramid of the Sun, San Juan Teotihuacán, 55800 Teotihuacán de Arista, State of Mexico, Mexico  |  6  |
|  e  |  Statue of Liberty National Monument, Liberty Island, New York, NY  |  NULL  |
|  f  |  Mandalay Bay, 3950 South Las Vegas Boulevard, Las Vegas, NV 89119  |  3  |

---++!! 2d
---+++!! Algorithm
<VERBATIM>
Describe your algorithm here. Pseudocode is preferred.
</VERBATIM>
---+++!! Analysis
<VERBATIM>
Descrbie and analyze your algorithm.
</VERBATIM>

---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Minimum Spanning Trees *[10 points]*
---++!! a
<VERBATIM>
Counterexample or Running time
This is not a minimum spanning tree algorithm.
Counter example: You have a cycle graph C(5) with edge weights 1, 1, 1, 3, 1. A nonincreasing ordering of the edge weights would be 1, 1, 1, 3, 1. However if you go through the first for loop once, the you will get the graph with weights 1, 1, 3, 1 and will stop at that since taking another edge out wont make it a connected graph. However, the MST of this graph would be the cycle graph with the edge with weight 3 taken out.
</VERBATIM>
---++!! b
<VERBATIM>
Counterexample or Running time
This is not a minimum spanning tree algorithm.
Counter example: You have a cycle graph C(5) with edge weights 1, 1, 1, 3, 1. The minimum spanning tree would be the cycle graph without the edge with weight 3 (i.e. 1, 1, 1, 1). However if you take the weights at random, you could end up with a cycle graph without an edge with weight 1 (i.e 1, 1, 3, 1). This would not be a MST.
</VERBATIM>
---++!! c
<VERBATIM>
Counterexample or Running time
this is a mst alg
theta(v) to find for cycles
must do this e times
total: theta(VE)
</VERBATIM>

---++!! Grader comments *[13/20]*
<VERBATIM>
(a) works correctly.
</VERBATIM>

---+ Problem 4.  DNA sequencing *[20 points]*

---++ 4a.  Simple case [10 points]
---+++!! i
<VERBATIM>
Describe and analyze the algorithm.

First you make a function [bool match(string a, string b)] that will return true if the last 4 letters of the first argument match the first 4 letters of the second argument. This will run in constant time.
Then you will find the first string that will be in the beginning of the phrase. This will have to run through n strings and have to match with n-1 strings each time. Thus this will run n^2.
After, you will find each successive phrase that will match with the first phrase. After you have found it, you will add the last letter of the second phrase to the first phrase. This will run in n-1 time. However you will do this till n-k is equal to 1. Thus the entire function will run in n^2 + n^2 which is n^2 time

</VERBATIM>

---+++!! ii
<VERBATIM>
Provide your result here.
</VERBATIM>
Do not worry about your difficulties in Mathematics. I can assure you mine are still greater.

and

%CODE{"cpp"}%
// paste your code here

// math.txt
 I ca
 Math
 abou
 are 
 assu
 can 
 diff
 grea
 in M
 mine
 not 
 stil
 worr
 you 
 your
. I c
Do no
I can
Mathe
about
an as
are s
assur
ater.
athem
atics
bout 
can a
cs. I
culti
diffi
e are
e sti
e you
eater
emati
es in
fficu
ficul
great
hemat
ics. 
icult
ies i
iffic
ill g
in Ma
ine a
l gre
ll gr
lties
matic
mine 
n Mat
n ass
ne ar
not w
o not
orry 
ot wo
ou mi
our d
out y
r dif
re st
re yo
reate
rry a
ry ab
s in 
s. I 
ssure
still
sure 
t wor
t you
thema
tics.
ties 
till 
u min
ultie
ur di
ure y
ut yo
worry
y abo
you m
your 


//problem4a.h
#ifndef __HW8__problem4a__
#define __HW8__problem4a__

#include <iostream>
#include <string.h>
#include <fstream>
using namespace std;

bool match(string a, string b);
string create();


#endif /* defined(__HW8__problem4a__) */



//problem4a.cpp
#include "problem4a.h"

bool match(string a, string b)
{
    if(a == "" || b == "")
        return false;
    string a3 = &a.back();
    a.pop_back();
    string a2 = &a.back();
    a.pop_back();
    string a1 = &a.back();
    a.pop_back();
    string a0 = &a.back();
    string a0123 = a0 + a1 + a2 + a3;
    b.c_str();
    if(a0123 == b.substr(0, 4))
        return true;
    return false;
}


string create()
{
    string phrase = "";
    string list[89];
    string holder;
    int xx = 0;
    ifstream file;
    file.open("math.txt");
    if(!file.is_open())
    {
        cout << "Unable to open file" << endl;
        return phrase;
    }
    while(!file.eof())
    {
        getline(file, holder);
        list[xx] = holder;
        xx++;
    }
    file.close();
    for(int ii = 0; ii < 89; ii ++)
    {
        bool first = true;
        for(int jj = 0; jj < 89; jj++)
        {
            if(match(list[jj], list[ii]))
            {
                first = false;
            }
        }
        if(first == true)
        {
            phrase += list[ii];
            list[ii] = "";
            break;
        }
    }
    for(int ii = 89; ii >= 0; ii--)
    {
        if(match(phrase, list[ii]))
        {
            phrase = phrase + list[ii][4];
            list[ii] = "";
            ii = 89;
        }
    }
    return phrase;
}




//main.cpp
#include <iostream>
#include "problem4a.h"
using namespace std;

int main() {
    cout << create() << endl;
    return 0;
}

%ENDCODE%

---++ 4b.  Complications [5 points]
<VERBATIM>
Describe and analyze the modification
</VERBATIM>

---++ 4c.  More complications [5 points]
---+++!! i
<VERBATIM>
Descrbie and analyze the modification.
</VERBATIM>
---+++!! ii
<VERBATIM>
Descrbie and analyze the modification.
</VERBATIM>

---+ Problem 5.  Traveling salesperson *[20 points]*
Provide a _short_ explanation of your approach here and the resulting cycle weight you found.

Also attach your code as =problem5.zip=, containing at least these files
   * =Makefile= :  running "make all" should compile your code to an executable =test=, which, when run, should produce your solution.
   * =result.txt= : the result file with one vertex name per line denoting the vertices of your cycle

resulting weight cycle: 100113
