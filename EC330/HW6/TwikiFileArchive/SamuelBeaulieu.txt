---+EC330 - Spring 2015 - Homework 6
%TOC%

---++_Assigned:_  Thursday, March 26
---++_Due:_  Thursday, April 2 _at the beginning of class._

<!--
PHI1=6..15
PHI2=3..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(SamuelBeaulieu),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(3+$MOD(%PHI%,3))}%
-->

---+ Problem 1. Representations. *[30 points]*
---++ a
---+++!! Running time
<VERBATIM>
</VERBATIM>
<latex>\Theta(E)</latex>
---+++!! Brief explanation
<VERBATIM>
To find the number of edges at a vertex, one has to go through every edge in 
the linked list (in the order of the list) in order to find the number of edges that 
include that vertex. Therefore the running time is proportional to the number of
edges.
</VERBATIM>
---++ b
---+++!! Running time
<VERBATIM>
</VERBATIM>
<latex>\Theta(E+V)</latex>
---+++!! Brief explanation
<VERBATIM>
Using a depth first search algorithm implemented with adjacent linked lists as in the text
in section 22.3, we can go through the graph and if a vertex is reached or pointed or 
connected by an edge, we can increment a counter for the degrees on that vertex. 
A depth first search algorithm goes through each vertex twice and checks each 
of its connected edges once. Therefore the running time is proportional
to the number of vertices plus the number of edges.
</VERBATIM>
---++ c
---+++!! Running time
<VERBATIM>
</VERBATIM>
<latex>\Theta(V)</latex>
---+++!! Brief explanation
<VERBATIM>
With a graph defined by a two dimensional vector, all the connections to a certain
vertex can be seen from one dimension of the vertex or the other. Therefore on simply
has to iterate through the column identified by that vertex and the row identified by that
vertex in order to find the number of edges that connect to it. Any duplicates are 
undirected edges so should only be counted once. Since this checks against 
all other vertices for a connection twice, it is proportional to two times to vertices or 
theta of the vertices.
</VERBATIM>
---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Graph algorithms *[20 points]*
---++ a
<VERBATIM>
Assumptions: Graph is defined by an adjacency-list implemented as a linked list of linked lists

A modified version of BFS(G,s) on page 595 in the text is used below.

bipartite = true
for each vertex u in G.V - {s}
	u.color = white
	u.d = inf
	u.pi = NIL
s.color = GRAY
s.d = 0
s.pi = NIL
Q = NULL
Enqueue(Q,s)
while Q is not equal to NULL
	u = Dequeue(Q)
	for each v in G.Adj[u]
		if v.color == WHITE
			v.color = GRAY
			v.d = u.d+1
			v.pie = u
			Enqueue(Q,v)
		if v.color == GRAY and v.d%2 == u.d%2 //If a node connected by an edge is 
                                          gray and is of the same set (even/odd).
			bipartite = false
		u.color = BLACK

Runtime is:
</VERBATIM>
<latex>\Theta(V+E)</latex>
---++ b
<VERBATIM>
Assumptions: Graph is defined by an adjacency-list implemented as a linked list of linked lists

A modified version of BFS(G,s) on page 595 in the text is used below.

cycles = false
for each vertex u in G.V - {s}
	u.color = white
	u.d = inf
	u.pi = NIL
s.color = GRAY
s.d = 0
s.pi = NIL
Q = NULL
Enqueue(Q,s)
while Q is not equal to NULL
	u = Dequeue(Q)
	for each v in G.Adj[u]
		if v.color == WHITE
			v.color = GRAY
			v.d = u.d+1
			v.pie = u
			Enqueue(Q,v)
		else
			cycles = true    //If it reaches a non-white node, there is a cycle
			break
		u.color = BLACK

Runtime is:
</VERBATIM>
<latex>\Theta(V+E)</latex>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Graph implementation *[20 points]*
---++ 3a.
<VERBATIM>
problem3a.cpp is attached.
</VERBATIM>
---++ 3b.
<VERBATIM>
Random graph of 7 vertices:
0[8]: 1 5 6
1[0]: 0 1 3 4 5 6
2[4]: 1 4 5 6
3[3]: 0 3 6
4[3]: 0 1 5 6
5[5]: 0 3 5
6[3]: 1 3 4 6

problem3b.zip is attached.

</VERBATIM>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  Simplified Chess *[30 points]*
---++ 4a
---+++ i.
<VERBATIM>
`  |  a  b  c  d  e  f  g  h
____________________________
 1 |  R  N  B  -  K  B  N  R
 2 |  P  P  -  -  -  -  P  P
 3 |  -  r  -  -  P  -  -  -
 4 |  -  -  -  -  -  -  -  -
 5 |  -  -  P  p  -  -  P  -
 6 |  -  -  -  -  p  -  p  b
 7 |  p  -  p  -  -  p  -  p
 8 |  -  -  P  q  Q  -  -  r

</VERBATIM>
%ATTACHURL%/4ai.png

---+++ ii.  
<VERBATIM>
`  |  a  b  c  d  e  f  g  h
____________________________
 1 |  K  -  -  -  -  -  p  k
 2 |  P  P  -  -  -  -  p  p
 3 |  -  -  -  -  P  -  -  -
 4 |  Q  -  -  -  -  -  -  -
 5 |  -  -  P  -  -  -  P  -
 6 |  -  -  -  -  -  -  -  -
 7 |  -  -  -  -  -  -  -  -
 8 |  -  -  -  -  -  -  -  -
</VERBATIM>

---++ 4b.  Main task [20 points]
I created a subclass in the header file called "node." Each node defines one on the graph of possible boards. Each node has a vector of nodes that contain its children nodes and a pointer to a parent node. I also created a function that rates the quality of a node. Using the nodes, I implement a graph that goes five turns ahead and is trimmed wherever the rate function returns a negative value (which is bad). The rating for each node is quite simply. If an opponent's piece is taken, points are added. if one of my pieces are taken, points are deducted. If my king is taken, a lot of point are deducted. If their king is taken, a lot of points are added. To choose the next move, I look at all the children to the current board's node and choose the one with the highest rating.

---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>
---

   * 4ai.png: <br />
     <img src="%ATTACHURLPATH%/4ai.png" alt="4ai.png" width="238" height="227" />
