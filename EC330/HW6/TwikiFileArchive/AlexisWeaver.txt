---+EC330 - Spring 2015 - Homework 6
%TOC%

---++_Assigned:_  Thursday, March 26
---++_Due:_  Thursday, April 2 _at the beginning of class._

<!--
PHI1=6..15
PHI2=3..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(AlexisWeaver),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(3+$MOD(%PHI%,3))}%
-->

---+ Problem 1. Representations. *[30 points]*
---++ a
---+++!! Running time
<VERBATIM>
Theta(V+E), where V is the number of vertices and E is the number of edges.
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
Must first traverse the entire linked list of edges to find the degree of each vertex, which takes Theta(E) time, then must go through the entire set of computed degrees for the vertices to find the vertex with the maximum degree, which takes Theta(V) time. Therefore, the total asymptotic running time is Theta(V+E).
</VERBATIM>
---++ b
---+++!! Running time
<VERBATIM>
Theta(V), where V is the number of vertices.
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
Traverse the outer linked-list (list of vertices), and find the length of inner linked list (neighbors of each vertex) for each vertex which is constant time, O(1), so the running time is Theta(V). 
</VERBATIM>
---++ c
---+++!! Running time
<VERBATIM>
Theta(V^2), where V is the number of vertices.
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
Using the graphical representation of the adjacency matrix as an example, in order to find the degree of each vertex, you must first sum each column (which takes O(V) time), and then sum each row (which also takes O(V) time), or vice-versa. Therefore, the total running time is Theta(V^2). 
</VERBATIM>
---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Graph algorithms *[20 points]*
---++ a
<VERBATIM>

bool checkBGraph(Graph  g)
  // go through all the edges on the graph
  for all edges in the g
    alternate colors for each edge's vertices
    // if the two vertices of the last edge have the same color, the graph is not bipartite
    if g.getColor(edgeLast->first) == g.getColor(edgeLast->second)
      return false;
  // the vertices are different colors
  return true;

</VERBATIM>
---++ b
<VERBATIM>

// this algorithm runs under the assumption that all nodes have been set to false (not visited) to start

func findCycle(g, origin, visited)
  for neighbor in graph[g]
    // if the neighbor to the origin is the origin
    if neighbor == origin
       cycle detected
    if not visited[neighbor]
       visited[neighbor] = true
       findCycle(g, neighbor, visited)
       visited[neighbor] = false  

</VERBATIM>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Graph implementation *[20 points]*
---++ 3a.

---++ 3b.

Output:

1[98]: 5 6 
2[114]: 1 3 5 6 
3[103]: 4 
4[114]: 2 3 6 
5[98]: 1 2 
6[98]: 1 2 3 4 5 
7[98]: 

Program ended with exit code: 0
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  Simplified Chess *[30 points]*
---++ 4a
---+++ i.
<VERBATIM>
Provide your answer here.
</VERBATIM>
---+++ ii.  
<VERBATIM>
Provide your answer here.
</VERBATIM>

---++ 4b.  Main task [20 points]
Provide a description of your approach here.  Upload your code online.

---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>
---
