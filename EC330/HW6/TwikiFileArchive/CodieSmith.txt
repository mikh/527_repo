---+EC330 - Spring 2015 - Homework 6
%TOC%

---++_Assigned:_  Thursday, March 26
---++_Due:_  Thursday, April 2 _at the beginning of class._

<!--
PHI1=6..15
PHI2=3..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(CodieSmith),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(3+$MOD(%PHI%,3))}%
-->

---+ Problem 1. Representations. *[30 points]*
---++ a
---+++!! Running time
<VERBATIM>
Theta(E).
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
This program would take Theta(E) time because it would have to go through each edge 
in the linked list and find which vertices appeared the most. To implement this, I would have
a counter for each vertices, and increment the corresponding counter each time that vertices 
was a match.
</VERBATIM>
---++ b
---+++!! Running time
<VERBATIM>
Theta(V).
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
The adjacency list made from a linked list of linked lists would give 
the runtime Theta(V) because there would be a linked list of adjacent edges
for each vertices, so you would have to go through the list of vertices and find which 
vertex the longest list corresponded to. 
</VERBATIM>
---++ c
---+++!! Running time
<VERBATIM>
Theta(V^2)
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
In order to check through an adjacency matrix, you would have to
count the number of 1's in each line, and check if this was the greatest. 
To do this, you would have to go through every column and every row, 
which creates a runtime of Theta(V^2). 
</VERBATIM>
---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Graph algorithms *[20 points]*
---++ a
<VERBATIM>
In this pseudocode, I assume that there is a queue entitled "Q" and that the graph is structured with 
nodes that contain a boolean variable "v" that is true if the node has been visited and false if it has not,
and each node has a color. The nodes also have connections to other nodes. The color of each node is 
originally set to "white".

pick any node to start with
while(Q != empty){
    if node.v == false{
          node.color = blue
          enqueue node.connections to Q
    }
    if node.v == true{
         dequeue node from Q
         if node.color == node(connections).color{
                  return "NOT BIPARTITE"
         }
    }
    move to next node in Q
}
return "BIPARTITE"

I found a similar problem to this on this website: http://www.ece.northwestern.edu/~dda902/336/hw3-sol.pdf
and used a similar method.
</VERBATIM>
---++ b
<VERBATIM>
This pseudocode assumes that there is a stack "S" and that the graph has connections between nodes, 
and that each node has a variable "v" which is true if it has been visited before and false if it has not. 
put start node on stack
while(stack != empty){
     node.v = true;
     put node.connections->stack
     if (any of node.connections.v == true)
          return "CYCLIC"
     else
         move to next node on stack
}
return "ACYCLIC"

I found a similar problem on this website: http://www.cs.jhu.edu/~xfliu/600.363_F03/hw_solution/midterm2_solution
and used a similar method. 
</VERBATIM>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Graph implementation *[20 points]*
---++ 3a.
Solution is attached at the bottom as "problem3a.cpp"
---++ 3b.
This is the output of my code after running print:

0[48]: 0 1 2 3 4 8 

1[49]: 1 3 4 7 

2[4]: 1 3 6 7

3[95]: 2 5 9 

4[63]: 0 2 4 6 9 

5[71]: 0 1 4 

6[70]: 0 2 3 4 

7[79]: 0 1 2 5 6 8 9 

8[94]: 0 1 3 4 9 

9[69]: 1 5 8 


my code (Graph.cpp and Graph.h) are attached at the bottom as "problem3b.zip"
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  Simplified Chess *[30 points]*
---++ 4a
---+++ i.
<VERBATIM>
`  |  a  b  c  d  e  f  g  h 
____________________________
 1 |  R  N  B  -  K  -  N  R 
 2 |  P  P  P  P  -  P  P  P 
 3 |  -  -  -  -  P  Q  -  - 
 4 |  -  -  B  -  -  -  -  - 
 5 |  -  -  -  -  -  -  -  - 
 6 |  -  p  -  -  -  p  -  - 
 7 |  p  -  p  p  p  k  p  p 
 8 |  r  n  b  q  -  b  n  r 

Please enter your move: c4-f7

Game Over:  White wins!
</VERBATIM>
---+++ ii.  
<VERBATIM>
`  |  a  b  c  d  e  f  g  h 
____________________________
 1 |  -  N  B  -  K   -  R  - 
 2 |  -   -   -  P  -   P  -  P 
 3 |  P  -  P  -   -   -   -  k 
 4 |  -   -  P  -   -   -   -  P 
 5 |  -   -  P  -  Q  N  -  - 
 6 |  -   -   -  -   -   -  -   - 
 7 |  -   -   -  -   -   -  -   - 
 8 |  -   -   -  -   -   -  -   - 
</VERBATIM>

---++ 4b.  Main task [20 points]
Provide a description of your approach here.  Upload your code online.

---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>
---
