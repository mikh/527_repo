---+EC330 - Spring 2015 - Homework 6
%TOC%

---++_Assigned:_  Thursday, March 26
---++_Due:_  Thursday, April 2 _at the beginning of class._

<!--
PHI1=6..15
PHI2=3..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(PeterGoulakos),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(3+$MOD(%PHI%,3))}%
-->

---+ Problem 1. Representations. *[30 points]*
---++ a
---+++!! Running time
Running time: <latex>\Theta(E + V)</latex>
---+++!! Brief explanation
The length of the linked list will be =E=, since all of the edges in the graph occur once in the list (they are represented as pairs). To figure out the degree of the vertex with the highest degree, a program would iterate through the list once. In each iteration, it will increment integers (each integer is assigned to one of the vertices) if it sees that vertex in the edge-list pair--there will be two increments per pair. Then, when the program has iterated through the linked list, it will have to find the maximum of the previously mentioned integers, which is the highest degree. This will take =V= iterations, because there is one integer per vertex in the graph. So, in total, there will be 2E + V operations to perform (the 2E is for the two integer increment, which should take constant time). This is =&Theta;(E + V)=
---++ b
---+++++This assumes an undirected graph.
---+++!! Running time
Running time is: <latex>O(V^2)</latex> in the very worst case (complete graph, all vertices connected to all others) if the time to find the size/length of a linked-list is up to linear, i.e. <latex>O(V)</latex>.

Otherwise, if finding the length of a linked-list is constant time, then the whole operation will be <latex>\Theta(V)</latex>
---+++!! Brief explanation
The adjacency list has a length of =V=. The program/algorithm needs one variable to keep track of the highest degree it has encountered so far. It should iterate through the list once, and in each iteration, if it finds a vertex with a higher degree than the current highest degree, then it will update the highest degree variable. Finding the degree of a vertex (i.e. getting the length of a linked list) _could_ take up to =V= time (C++.com says, for C++11 this is constant time, but C++98 up to linear). So in the worst case, the whole operation takes =V^2= time (if it's a complete graph), but if linked-list-size is constant then it's =V= time.
---++ c
---+++!! Running time
Running time is: <latex>\Theta(V^2)</latex>
---+++!! Brief explanation
The matrix would probably be implemented like this: =vector&lt;vector&lt;int&gt;&gt;=. The outer vector will have a length of =V=, and the algorithm needs to iterate through all of the =V= entries once. There should be one variable that keeps track of the highest degree encountered so far, while looping through the outer vector. For each of the entries in the outer vector, the algorithm needs to loop through the inner vector, which also has a length of =V=. As it goes through the inner vector, it should increment a local variable if it finds a non-zero number. At the end of one inner vector (one vertex), the local variable will be set to the degree of that vertex. If this degree is larger than the current highest degree, then the highest degree is set to the degree that was just found.

In total, the program will need to iterate =V * V= times; =V= for the inner, =V= times.
---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Graph algorithms *[20 points]*
---++ a
To determine bipartiteness (similar to BFS):

<pre>
BFS-bipartite(graph g): // g is a graph
    set all vertices of g to yellow // unvisited
    pick any vertex as start vertex
    set start vertex to black
    put start vertex in Queue
    while Queue is not empty:
        thisVertex = dequeue() /// pops a vertex from the Queue
        for each neighbor N of thisVertex:
            if N is yellow:
                make N black if thisVertex is white; make N white if thisVertex is black
                enqueue(N) /// puts a vertex into the Queue
            else if N's color == thisVertex's color:
                return False //// not bipartite
    return True //// bipartite -- didn't find any same-color neighbors
</pre>
---++ b
To determine if there is a cycle in the graph:

<pre>
Initialize():
    set all vertices to white
    for each vertex V in graph: //// the point of this is to start DFS multiple times if the graph is not fully-connected (i.e. could be very sparse)
        if V is white: ///// un-visited
            if DFS-cycle(V) is True: //// contains cycle
                return True ///// found a cycle
    return False //// no cycles found

DFS-cycle(thisVertex): // start DFS from this vertex and check for cycles
    set thisVertex to black ///// visited
    for each neighbor N of thisVertex:
        if N is white: //// have not visited it yet
            if DFS-cycle(N) is True:
                return True //// found a cycle deeper in recursion
        else if N is black:
            return True //// found a cycle just now (visited an already-visited vertex)

    return False //// did not find any cycles
</pre>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Graph implementation *[20 points]*
---++ 3a.
Attached as =problem3a.zip=
---++ 3b.
Attached as =problem3b.zip=

Random graph with 14 vertices:

<pre>
0[0]: 1 2 3 5 7 8 10 12 
1[1]: 4 8 9 
2[2]: 0 4 5 9 10 11 12 13 
3[3]: 0 4 7 13 
4[4]: 0 2 3 5 8 10 12 13 
5[5]: 2 3 4 8 9 10 12 13 
6[6]: 1 5 8 9 10 11 
7[7]: 1 4 5 6 10 11 12 13 
8[8]: 1 2 3 4 6 7 9 11 13 
9[9]: 2 4 7 8 12 
10[10]: 1 3 4 5 6 9 11 12 13 
11[11]: 1 4 5 6 10 13 
12[12]: 2 5 6 7 11 13 
13[13]: 0 1 2 3 4 5 6 7 
</pre>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  Simplified Chess *[30 points]*
---++ 4a
---+++ i.
<pre>
`  |  a  b  c  d  e  f  g  h 
____________________________
 1 |  R  -  -  Q  K  B  -  R 
 2 |  -  P  P  -  P  P  P  P 
 3 |  P  -  N  P  -  -  -  - 
 4 |  -  -  -  -  -  -  -  - 
 5 |  -  -  p  -  -  -  -  - 
 6 |  -  -  -  -  p  -  p  B 
 7 |  p  p  q  p  -  N  -  p 
 8 |  r  n  b  k  -  b  r  - 

Please enter your move: f7-d8
Game Over:  White wins!
</pre>
---+++ ii.  
<pre>
`  |  a  b  c  d  e  f  g  h 
____________________________
 1 |  k  p  -  -  K  B  -  - 
 2 |  p  p  -  -  P  P  P  - 
 3 |  -  -  -  -  -  -  -  - 
 4 |  -  R  -  -  -  -  -  - 
 5 |  -  -  -  -  P  -  -  - 
 6 |  -  -  -  -  -  -  -  B 
 7 |  -  -  -  -  -  N  -  - 
 8 |  -  -  -  -  -  -  -  - 
</pre>
The three pawns are preventing the king from moving anywhere from the top-left corner. Not very logical, but it is certainly possible.
---++ 4b.  Main task [20 points]
The myPlayer that I wrote is able to look one move ahead of the player's current move, and consider all of the possible enemy moves as a result of each current move. It has a function that, given a current chessBoard, returns scores (one for each player) based on the point-values of all the pieces that are currently on the board. The logic then deducts points from the move if the move results in the player losing points (i.e. losing a piece), and adds points to the move if the move results in an increase in points (i.e. capturing a piece). It will do this for all of the current moves, and for all of the enemy's moves that are one move ahead. After all of this computation, it will execute the move with the highest score.

To keep the king safe and out of trouble, I programmed the player's king to never be moved. I also pre-programmed the first two moves of the player for every game; the more complex algorithm kicks in during the player's third move of the game.
---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>
---
