---+EC330 - Spring 2015 - Homework 6
%TOC%

---++_Assigned:_  Thursday, March 26
---++_Due:_  Thursday, April 2 _at the beginning of class._

<!--
PHI1=6..15
PHI2=3..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(InnaTurshudzhyan),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(3+$MOD(%PHI%,3))}%
-->

---+ Problem 1. Representations. *[30 points]*
---++ a
---+++!! Running time
<VERBATIM>
Theta(E)
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
To find the maximum degree we need to look at every 
combination of vertices (every edge). The number of
 times we see one vertex will be the degree. => we need 
to see every edge => Running time: Theta(E)
</VERBATIM>
---++ b
---+++!! Running time
<VERBATIM>
Theta(E)
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
We need to loop through all the edges to find the 
maximum degree (similar to part a), so that the total
 number would be 2E => Theta(E).
</VERBATIM>
---++ c
---+++!! Running time
<VERBATIM>
Theta(V^2)
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
To find the maximum degree we need to loop through 
the V vertices, each of them has V vertices that we need 
to look at too => V^2 (that's the size of the Matrix as well). 
</VERBATIM>
---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Graph algorithms *[20 points]*
---++ a
<VERBATIM>
Create a class Vertex, that will have member variables: 
currentState( int : -1,0,1), name(char: a,b,c,...,z) and
 value(bool: 0,1). 
//Because we are checking if the graph is bipartite, we 
// only want the vertices to have 2 values (colors). 

Start with a random vertex (a) and assign a 0 value to it.
Put a in a queue. 
while (queue is not empty)
pop a from a queue
for (each neighbor of a)
if neighbor doesn't have a value, assign the opposite value
to it (0 is opposite to 1).
put the neighbor in a queue.
else if neighbor has a value, and the value is the same as a 
(a has the same value as the neighbor) => the graph is NOT bipartite(return).
else => the graph is bipartite(return).
</VERBATIM>
---++ b
<VERBATIM>
Use the Breadth First Search algorithm, but add a check if (an undiscovered edge leads to a discovered vertex) => the Graph contains a cycle.
</VERBATIM>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Graph implementation *[20 points]*
---++ 3a.
Attach your solutions to this topic.
   * [[%ATTACHURLPATH%/problem3a.cpp][problem3a.cpp]]: Graph.cpp

---++ 3b.
Attach your solutions to this topic.
<VERBATIM>
1[8]: 
2[0]: 2 
3[9]: 2 3 
4[1]: 1 
5[3]: 1 2 3 4 5 
6[7]: 1 5 
7[2]: 1 6 
8[2]: 1 3 5 6 7 8 
9[1]: 2 3 5 7 
10[2]: 1 3 9 //The colors are random
</VERBATIM>
   * [[%ATTACHURLPATH%/problem3b.zip][problem3b.zip]]: Problem 3b: Graph.h, problem3b.cpp(Graph.cpp) and main.cpp (to print)

---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  Simplified Chess *[30 points]*
---++ 4a
---+++ i.
<VERBATIM>

Random:

Move #18: Black moves b4 - d5
`  |  a  b  c  d  e  f  g  h 
____________________________
 1 |  R  N  B  Q  K  B  N  - 
 2 |  P  P  P  P  P  P  P  - 
 3 |  -  -  -  -  -  -  -  - 
 4 |  -  -  -  -  -  -  -  - 
 5 |  -  p  -  n  -  -  -  - 
 6 |  b  -  -  -  p  -  -  - 
 7 |  p  -  p  p  n  -  -  - 
 8 |  -  r  -  q  k  R  -  P 

Move #19: White moves f8 - e8
Game Over!
White player wins

Smarter:

Move #24: Black moves b2 - a1
`  |  a  b  c  d  e  f  g  h 
____________________________
 1 |  b  N  B  -  K  B  N  - 
 2 |  P  -  P  P  -  -  -  - 
 3 |  -  -  -  -  -  -  -  - 
 4 |  -  -  -  -  -  P  -  - 
 5 |  -  -  -  -  -  -  -  Q 
 6 |  -  -  -  p  -  -  -  - 
 7 |  p  p  p  -  p  -  -  - 
 8 |  r  n  b  q  k  -  n  - 

Move #25: White moves h5 - e8
Game Over!
White player wins

Did not beat all opponents ... ended at weight 3.


</VERBATIM>
---+++ ii.  
<VERBATIM>
Example of a case when the king has no moves:

Move #11: White moves e5 - g4
`  |  a  b  c  d  e  f  g  h 
____________________________
 1 |  R  N  B  Q(K)B  -  R 
 2 |  P  P  P  P  P  p  -  P 
 3 |  -  -  -  -  -  -  -  - 
 4 |  -  -  -  -  -  -  N  - 
 5 |  -  -  -  -  -  -  -  - 
 6 |  -  -  -  -  -  -  -  - 
 7 |  p  p  p  p  p  p  p  - 
 8 |  r  n  b  q   k  b  n  r 

Move #12: Black moves f2 - e1
Game Over!
Black player wins

</VERBATIM>

---++ 4b.  Main task [20 points]
<VERBATIM>

I created a function that would calculate the score of each board.
 I assigned values to each piece. Now I only make a move that 
maximizes my score.(I find the maximum out of all the moves 
available). I could only beat the first 2 players, but not the third one.

Here's my myPlayer.cpp code:

#include "chessBoard.h"
#include "myPlayer.h"


int myPlayer::find_score(chessBoard myBoard)
{
	double whiteScore = 0;
	double blackScore = 0;
	
	for (char i = chessBoard::minCol; i<=chessBoard::maxCol; i++)
	{
		for (int j = chessBoard::minRow; j<=chessBoard::maxRow; j++)
		{
			try
			{
				if (myBoard.atSquare(i,j).print() == 'p')
				{
					blackScore += 1;
				}
				else if(myBoard.atSquare(i,j).print() == 'r')
				{
					blackScore += 6.4;
				}
				else if(myBoard.atSquare(i,j).print() == 'n')
				{
					blackScore += 2.4;
				}
				else if(myBoard.atSquare(i,j).print() == 'b')
				{
					blackScore += 4;
				}
				else if(myBoard.atSquare(i,j).print() == 'q')
				{
					blackScore += 3;
				}
				else if(myBoard.atSquare(i,j).print() == 'k')
				{
					blackScore += 10.4;
				}


				else if (myBoard.atSquare(i,j).print() == 'P')
				{
					whiteScore += 1;
				}
				else if(myBoard.atSquare(i,j).print() == 'R')
				{
					whiteScore += 6.4;
				}
				else if(myBoard.atSquare(i,j).print() == 'N')
				{
					whiteScore += 2.4;
				}
				else if(myBoard.atSquare(i,j).print() == 'B')
				{
					whiteScore += 4;
				}
				else if(myBoard.atSquare(i,j).print() == 'Q')
				{
					whiteScore += 3;
				}
				else if(myBoard.atSquare(i,j).print() == 'K')
				{
					whiteScore += 10.4;
				}
			}
			catch(chessBoard::NoPieceException e)
			{}
		}
	}

	if (myColor == myBoard.White)
	{
		return (whiteScore - blackScore);
	}
	else
	{
		return (blackScore - whiteScore);
	}
}


chessBoard::move myPlayer::getMove() 
{
	chessBoard::move bestMove;	
	double maxScore = -10000;

	for (int k = 0; k < myBoard.numMoves(); k++)
	{
		chessBoard copy(myBoard);
		copy.makeMove(myBoard.nthMove(k));

		if (maxScore <= find_score(copy))
		{
			maxScore = find_score(copy);
			bestMove = myBoard.nthMove(k);
		}
	}

	myBoard.makeMove(bestMove);
	return bestMove;
}


</VERBATIM>

---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>
---


