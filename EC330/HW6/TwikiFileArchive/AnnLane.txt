---+EC330 - Spring 2015 - Homework 6
%TOC%

---++_Assigned:_  Thursday, March 26
---++_Due:_  Thursday, April 2 _at the beginning of class._
Collaborator: Dan Gorelick
<!--
PHI1=6..15
PHI2=3..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(AnnLane),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(3+$MOD(%PHI%,3))}%
-->

---+ Problem 1. Representations. *[30 points]*
---++ a
---+++!! Running time
&Theta;( E )
---+++!! Brief explanation
Assuming we know the names of the vertices, we can create an array with the length of the number of vertices where each element is initialized to zero. I also keep a 'max_degree' variable which is initialized to 0. Then we traverse the linked list of edges (which takes E time to see all edges) and each time a vertex is encountered, the associated array element is incremented by 1. Accessing the array element and then incrementing it takes constant time. The just incremented elements are compared to the 'max_degree' variable and 'max_degree' is updated accordingly. Again, this is constant time. Once all edges have been visited, then 'max_degree' is returned. So the overall runtime depends on the number of edges.
---++ b
---+++!! Running time
&Theta;(E)
---+++!! Brief explanation
While the linked lists of linked lists must be traversed in order, it only needs to be traversed through each vertex's linked list of adjacent vertices. This is on the order of E nodes to traverse. Again, a max_degree variable is maintained and updated. So for each vertex, the number of adjacent vertices is counted and if it is higher then max_degree, then max_degree is updated. This operation takes constant time. So after &Theta;(E) nodes, the max_degree is determined. So runtime is &Theta;(E).
---++ c
---+++!! Running time
&Theta;(V^2)
---+++!! Brief explanation
The matrix will be V by V, or V^2 in size. The entire matrix must be traversed along each row and each of the V elements must be summed. The maximum degree can be stored in 'max_degree' and can be updated accordingly, which requires constant time. So summing V elements per V rows requires &Theta;(V^2)
---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Graph algorithms *[20 points]*
Source: http://www.maths.manchester.ac.uk/~mrm/Teaching/DiscreteMaths/Slides/GraphColouringSlides.pdf
---++ a
<VERBATIM>
iisBipartite(AdjList)							//Assumption: Graph is in adjacency list
	color[V] = zeros(V) 						//Initialize color list with length of V vertices with zero	
	color[0] = 1								//Set first vertex color to 1; other color is -1
	jj = 0										//To traverse AdjList
	for ii = 0 to V-1
		currColor = 1							//Know what current vertex's color is
		while !AdjList[ii].empty()				//Continue traversing this part of AdjList until empry
			adjV = Adjlist[ii][jj]				//Adjacent vertex of interest
			if color[adjV] == 0					//See if a color has been assigned
				color[adjV] = currColor * -1
			else if color[adjV] == currColor
				return false					//This graph is not bipartite
			jj++
	
	return true									//If no error in 2 coloring graph, then must be bipartite
					
	//Runtime = &Theta(V + E) which is linear
	//Traverse the first dimension of AdjList which is V and then find E total values in AdjList to operate on
		 
</VERBATIM>
---++ b
<VERBATIM>
containsCycle(start)
	numVertices = 0;
	grayVertices = 0;
	while color[vertex] == no-color		//color vector stores associated color for vertex
		color[numVertices] = white
		numVertices++;				//Track number of vertices
	for color[vertex] == white
		Visit(V)
		
Visit(V)
	color[V] = gray
	for each n adjacent node to V
		if n is gray or black
			return true				//If adjacent node has been visited already, then graph has cycle
		else n is white
			Vist(n)
	grayVertices++;					//Found a grayVertex
	if grayVertices == numVertices
		return false				//Have visited all vertices and haven't found a cycle
	color[V] = black
		
</VERBATIM>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Graph implementation *[20 points]*
---++ 3a.
   * [[%ATTACHURLPATH%/problem3a.cpp][problem3a.cpp]]: problem3a.cpp
---++ 3b.
   * [[%ATTACHURLPATH%/problem3b.zip][problem3b.zip]]: problem3b.zip
Output for 10 Vertices:
<VERBATIM>
1[1]: 1 6 7 8 10 
2[1]: 1 3 5 7 8 10 
3[1]: 1 2 3 6 8 
4[1]: 3 7 9 
5[1]: 1 4 6 7 8 10 
6[1]: 1 6 8 9 
7[1]: 3 5 6 9 10 
8[1]: 3 7 
9[1]: 3 4 6 7 9 10 
10[1]: 1 3 5 7 9 
</VERBATIM>

---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  Simplified Chess *[30 points]*
---++ 4a
---+++ i.
<VERBATIM>
Please enter your move: e3-e7
I move: h6 - g8
`  |  a  b  c  d  e  f  g  h 
____________________________
 1 |  -  N  B  Q  K  B  N  R 
 2 |  -  P  P  P  P  P  P  P 
 3 |  -  -  -  -  -  -  -  - 
 4 |  P  -  -  -  -  -  -  - 
 5 |  -  -  -  -  -  p  -  - 
 6 |  -  -  n  -  -  -  -  - 
 7 |  p  p  p  p  R  -  p  p 
 8 |  r  -  b  q  k  b  n  r 

Please enter your move: e7-e8

Game Over:  White wins!



White Player move sequence:
a2-a3
a3-a4
a1-a3
a3-e3
e3-e7
e7-e8

</VERBATIM>

---+++ ii.  
<VERBATIM>
Provide your answer here.
</VERBATIM>

---++ 4b.  Main task [20 points]
Moves are made with some strategy. First, an random of the possible positions is initialized as the move to take so that I actually do some move. Then, I iterate through the possible positions resulting from the various moves. If making that move will capture one of the opponent's pieces, then the move to make is set to that quite desirable move. This is a simple, but offensive strategy. 

---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>
---




