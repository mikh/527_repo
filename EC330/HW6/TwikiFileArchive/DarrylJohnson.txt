---+EC330 - Spring 2015 - Homework 6
%TOC%

---++_Assigned:_  Thursday, March 26
---++_Due:_  Thursday, April 2 _at the beginning of class._

<!--
PHI1=6..15
PHI2=3..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(DarrylJohnson),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(3+$MOD(%PHI%,3))}%
-->

---+ Problem 1. Representations. *[30 points]*
---++ a
---+++!! Running time
<latex>\theta (E)</latex>
---+++!! Brief explanation
<VERBATIM>
Since the edge list contains E elements (all the edges in the map), it would lake E time to pass through the list to count the maximum degree of the nodes. 
</VERBATIM>
---++ b
---+++!! Running time
<latex>\theta (V)</latex>
---+++!! Brief explanation
<VERBATIM>
If the size of the linked list can be determined in constant time, then it is as simple as finding the maximum size of a linked list within the linked list. Which is of size V.
</VERBATIM>
---++ c
---+++!! Running time
<latex>\theta (V^{2})</latex>
---+++!! Brief explanation
<VERBATIM>
To matrix would be of size VxV. As such, it would take V passes through the vector for each node and then v passes through that node to count which nodes are adjacent. 
</VERBATIM>
---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 2.  Graph algorithms *[20 points]*
---++ a
%CODE{"cpp"}%
// BFS implementation by coloring all adjacent nodes a different color than current node
// G is a graph
// G contains a method for returning the adjacent vertexes with a supplied vertex -- adjacentVertexes(node v)
// v is a start node
// Node contains a method for setting its color

bool isBipartite(G, v) {
  Q is a new empty Queue
  Q.enqueue(v)

  v.setColor(red)
  
  while Q is not empty  {
    v = Q.dequeue()
    for each node x in G.adjacentVertexes(v) {
      if (node.isColored and x.color matches v.color) {
         return false
}
     else {
    Q.enqueue(x)
    color x opposite v
}
}
}
return true
}
%ENDCODE%
---++ b
%CODE{"cpp"}%
// BFS implementation by checking adjacent nodes for color
// G is a graph
// G contains a method for returning the adjacent vertexes with a supplied vertex -- adjacentVertexes(node v)
// v is a start node
// Node contains a method for setting its color

bool containsCycle(G, v) {
  Q is a new empty Queue
  Q.enqueue(v)

  v.setColor(black)
  
  while Q is not empty  {
    v = Q.dequeue()
    for each node x in G.adjacentVertexes(v) {
      if (node.isColored) {
         return false
}
     else {
    Q.enqueue(x)
    x.color(black)
}
}
}
return true
}
%ENDCODE%
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 3.  Graph implementation *[20 points]*
---++ 3a.
Attach your solutions to this topic.
---++ 3b.
<VERBATIM>
0[0]: 0 1 4 6
1[0]: 1 2 3 6 
2[0]: 1 2 3 4 5 6 
3[0]: 1 4 
4[0]: 0 1 3 4 6 
5[0]: 0 2 4 
6[0]: 1 3 4 
</VERBATIM>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  Simplified Chess *[30 points]*
---++ 4a
---+++ i.
<VERBATIM>
`  |  a  b  c  d  e  f  g  h 
____________________________
 1 |  R  N  B  Q  K  B  N  - 
 2 |  P  P  P  P  P  P  P  - 
 3 |  -  -  -  -  -  -  -  - 
 4 |  -  -  -  -  -  -  -  - 
 5 |  -  -  -  -  -  -  -  P 
 6 |  p  -  -  -  p  p  p  p 
 7 |  -  p  p  n  -  -  -  - 
 8 |  r  -  b  R  k  b  n  r 

Please enter your move: d8-e8

Game Over:  White wins!
</VERBATIM>
---+++ ii.  
<VERBATIM>
If black still has it's king, then it will always have a move (in this version of chess).
</VERBATIM>
---++ 4b.  Main task [20 points]
Provide a description of your approach here.  Upload your code online.

I began the chess AI by ranking the importance of each chess piece:
King: 200
Queen: 50 ...

Then I used those results to find the best "take" I currently have available. If none are available, I go through all possible moves for me and then the AI, and then me again and add up all the scores to try an maximize my score. d
---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>
---
