---+EC330 - Spring 2015 - Homework 6
%TOC%

---++_Assigned:_  Thursday, March 26
---++_Due:_  Thursday, April 2 _at the beginning of class._

<!--
PHI1=6..15
PHI2=3..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(AdinHorovitz),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(3+$MOD(%PHI%,3))}%
-->

---+ Problem 1. Representations. *[30 points]*
---++ a
---+++!! Running time


Finding max degree vertex in edge list as linked list runs in <latex> \Theta(E).</latex>



---+++!! Brief explanation


1) create 2xV array initialized to zero with maxDegree variable set to 0;  <latex>  \Theta(1)</latex>

2) Iterate through linked list, reading vertices from each Edge, and incrementing tally array for both vertices involved. <latex> \Theta(E + K) = \Theta(E)</latex>

3) if any tally exceeds maxDegree, set maxDegree to new Max value <latex> \Theta (2K * E) = \Theta(E)</latex>

Therefore: overall runtime = <latex> \Theta(E)</latex>



---++ b
Finding Max degree of a linked list adjacency list runs in <latex> \Theta(E + V) </latex>
---+++!! Running time

0) create tally array and maxDegree variable, all initialized to 0 (we don't know size of list beforehand, so entire list must be traversed for this step)   <latex>\Theta(V) </latex>  

1) iterating through outer list, in turn iterate through each vertex-neighbor list   <latex> \Theta(2E) </latex>

2) increment tally array each time a vertex is seen  <latex>  \Theta(2E) </latex>

3) if maxDegree is exceeded, change to new value  <latex> \Theta(1) </latex>

Overall runtime   <latex>= \Theta(E + V) </latex>
---++ c
---+++!! Running time

Finding maxDegree of Adjacency matrix runs in  <latex> \Theta(V^2) </latex>
---+++!! Brief explanation

0) create maxDegree = 0 variable  <latex> \Theta(1) </latex>

1) find sum for each column of matrix  <latex> \Theta(V^2) </latex>

2) if some ever exceeds maxDegree, update maxDegree  <latex> \Theta(1) </latex>


Therefore, overall runtime is  <latex> \Theta(V^2) </latex>
---++!! Grader comments *[/30]*
<VERBATIM>Question 1 Results:

Total Grade: 30

	10        		
	10        		
	10        		


</VERBATIM>

---+ Problem 2.  Graph algorithms *[20 points]*
---++ a
<VERBATIM>

Modified Depth-First-Search: isBipartite(adjList) with isBI_VISIT(vertex)

 // Adjacency list is a vector of V vectors of vertices, each at the head of a list of that vertex's neighboring vertices.
bool isBipartite( vector< vector< Vertices> >  adjList){

      // color array of size V is initialized with WHITE in all indices............runtime= O(V)
     char* color[V];

      for all V vertices, v {
          color[v] = WHITE;
      }

    // color[] is searched for WHITE vertices............runtime= O(V) * number of disconnected sub-Graphs
    // Vertex, thisVert, is chosen and assigned BLUE (base function call -- Arbitrary), then isBi_VISIT() is called on vertex
     while WHITE vertices, thisVert, can be found{
          color[thisVert] = BLUE;

          // thisVert is pushed onto stack
          if (isBi_VISIT(thisVert) == FALSE)
               return false;
     }

     //otherwise
     return true;
}


// isBi_VISIT creates a stack of function calls ......will be called once per vertex..............runtime=O(V)
bool isBi_VISIT(Vertex thisVert){

      // attempt to assign OPPOSITE color to neighbors... if already the SAME color, graph != bipartite
      if (color[thisVert] == BLUE)
          neighborColor = RED
     else
          neighborColor = BLUE

     // all neighbors of thisVert are traversed and checked for color agreement.........runtime = O(2E)
     for all adjacent vertices, neighbor{

          //  if neighbor is still WHITE, push onto DFS stack
          if (color[neighbor] == WHITE){

               // if not yet visited, assigne opposite color
               color[neighbor] = neighborColor;
               
               if (isBi_VISIT(neighbor) == FALSE)
                    return false;
          }

          // if neighbor was already visited, but was assigned THIS color, graph isn't bipartite!
          else if (neighbor[color] == color[thisVert]){
               return false;
          }
     }

     //if all isBi_VISIT calls returned true
          return true;
}

Aggregate runtime for a graph = O(V + K*V + 2E);
      --> K = #disconnected sub-graphs

Total runtime = O(V+E)   --> LINEAR

</VERBATIM>
---++ b
<VERBATIM>



Modified Depth-First-Search: hasCycle(adjList) with hasCy_VISIT(vertex)

 // Adjacency list is a vector of V vectors of vertices, each at the head of a list of that vertex's neighboring vertices.
bool hasCycle( vector< vector< Vertices> >  adjList){

      // color array of size V is initialized with WHITE in all indices............runtime= O(V)
     char* color[V];

      for all V vertices, v {
          color[v] = WHITE;
      }

    // color[] is searched for WHITE vertices............runtime= O(V*K)....K = number of disconnected sub-Graphs
    // Vertex, thisVert, is chosen and assigned GRAY, then isBi_VISIT() is called on vertex
     while WHITE vertices, thisVert, can be found{
          color[thisVert] = GRAY;

          // thisVert is pushed onto stack
          if (hasCy_VISIT(thisVert) == TRUE)
               return TRUE;
     }

     //otherwise
     return FALSE;
}


// hasCy_VISIT() creates a stack of function calls ......will be called once per vertex..............runtime=O(V)
bool hasCy_VISIT(Vertex thisVert){

     // all neighbors of thisVert are traversed and checked to see if already visited.........runtime = O(2E)
     for all adjacent vertices, neighbor{

          //  if neighbor is still WHITE, push onto DFS stack
          if (color[neighbor] == WHITE){

               // mark as visited
               color[neighbor] = GRAY;
               
               if (hasCy_VISIT(neighbor) == TRUE)
                    return TRUE;
          }
         
          // The FIRST time a non-white neighbor is encountered, we detect a "back edge" Therefore cycle exists
          return TRUE;
      }

     //if all hasCy_VISIT calls returned FALSE
          return FALSE;
}


Aggregate runtime for a graph = O(V + K*V + 2E);
      --> K = #disconnected sub-graphs

If K == 1, total runtime = O(V+E)   --> LINEAR










</VERBATIM>
---++!! Grader comments *[/20]*
<VERBATIM>Question 2 Results:

Total Grade: 17

	10        		
	7         		May not be O(V) specifically, for a dense graph the E will be larger


</VERBATIM>

---+ Problem 3.  Graph implementation *[20 points]*
---++ 3a.
Attach your solutions to this topic.
---++ 3b.
Attach your solutions to this topic.

<VERBATIM>

ah@ah-Lx:~/Desktop/EC330/HW6/p3/3b$ ./3b
0[0]: 1 3 5 6 7 8 
1[1]: 2 4 5 6 7 9 10 
2[2]: 4 5 6 
3[3]: 0 5 9 10 11 
4[4]: 1 3 6 7 8 9 10 
5[5]: 3 4 6 7 9 
6[6]: 2 3 5 7 9 11 
7[7]: 1 3 5 9 10 11 
8[8]: 0 1 3 7 9 10 11 
9[9]: 1 3 5 6 7 11 
10[10]: 1 3 4 8 9 11 
11[11]: 0 1 2 3 7 

</VERBATIM>
---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  Simplified Chess *[30 points]*
---++ 4a
---+++ i.
<VERBATIM>



Please enter your move: a8-c6
I move: h7 - h6
`  |  a  b  c  d  e  f  g  h 
____________________________
 1 |  R  N  B  Q  K  -  N  R 
 2 |  P  P  P  -  -  P  P  P 
 3 |  -  -  -  -  P  -  -  - 
 4 |  -  -  -  P  -  -  -  - 
 5 |  -  -  -  -  -  b  -  - 
 6 |  -  -  B  p  -  p  -  p 
 7 |  -  -  p  k  p  -  p  - 
 8 |  -  -  -  q  -  b  n  r 

Please enter your move: c6-d7

Game Over:  White wins!





</VERBATIM>
---+++ ii.  
<VERBATIM>


Because the only obstacle for the king is his own pieces, he must be blocked
by allied pieces, and then they need to be blocked.....

`  |  a  b  c  d  e  f  g  h 
____________________________
 1 |  -  -  -  -  -  -  -  - 
 2 |  -  -  -  -  -  -  -  - 
 3 |  -  -  -  -  -  -  -  - 
 4 |  -  -  -  -  -  -  -  - 
 5 |  -  -  -  -  -  -  P  - 
 6 |  -  -  -  -  -  P  p  P 
 7 |  -  -  -  -  -  p  r  p 
 8 |  -  -  -  -  -  -  b  k 



</VERBATIM>

---++ 4b.  Main task [20 points]

<VERBATIM>
/*
**  -------------------Algorithm to find bestMove in simplified chess-------------------
**                            Adin Horovitz -- EC330 HW6 -- 4/1/15
**
**  Loops through all valid moves and calculates: 
**  
**  Score = pointsGained (from capture) - pointsLost (from enemy response)
**  
**  --> findBest() calls itself with new arguments to look ahead to the enemy's move.
**  --> When looking a move ahead, does not call findBest again --> returns less sophisticated
**     best move (only based on capture), which is passed back along with ptsLost to first findBest() call.
**  --> back in present state of board, Score is calculated and any ties are stored for tie breaking.
**
**  Ties for bestMove are won by whichever move results in the MOST DEVELOPMENT....
**  --> at the end of the lookAhead call to findBest(), testBoard is advanced once more (ie original
**     player's NEXT turn) and the number of moves is calculated and passed back to calling scope.
**  --> Thus, moves that open up lanes of movement are favored!
**
**  After all moves have been analyzed, best move is selected:
**  Priority 1: move that generates the highest Score
**  Priority 2: among moves tied for highest score, move resulting in most moves NEXT turn
**
*/

</VERBATIM>
---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>
---

   * [[%ATTACHURLPATH%/problem3a.cpp][problem3a.cpp]]: HW_6_p3a_directed_Graph

   * [[%ATTACHURLPATH%/problem3b.zip][problem3b.zip]]: HW_6_p3b_generateRandom
