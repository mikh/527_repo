---+EC330 - Spring 2015 - Homework 6
%TOC%

---++_Assigned:_  Thursday, March 26
---++_Due:_  Thursday, April 2 _at the beginning of class._

<!--
PHI1=6..15
PHI2=3..5
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(DavidAsbjornsson),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(3+$MOD(%PHI%,3))}%
-->

---+ Problem 1. Representations. *[30 points]*
---++ a
---+++!! Running time
<VERBATIM>
theta(E)
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
We would go through every element in the list and keep count of how often we see each vertex, then we would return the max count.
Size of our list would be theta(E), so the running time would be theta(E)
Psudocode:
linkedlist edgeList //our list of edges, the list would be ({a,b}{b,c}{c,a}) for a triangle of abc vertices
int counterA
int counterB
int counterC

for i=0 to i=E-1						                        //theta(E)
	increment counters for vertices seen in edgeList(i)   //theta(1)
end

return max(counterA,counterB,counterC)				        //theta(1)
</VERBATIM>
---++ b
---+++!! Running time
<VERBATIM>
theta(V)
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
We have an adjacency-list as a linked list of linked lists, so lets say we have list A (size V) that has linked lists (B1,B2,...,BV) as it's elements
we search for the element of A that has max size, this will take theta(V) time.
Lets take a triangle (1,2,3) as an example:
A   B
1 - 2,3
2 - 1,3
3 - 1,2

So we only go through list A and find max(A), that will take us theta(V) time.
We would then return the size of max(A).
</VERBATIM>
---++ c
---+++!! Running time
<VERBATIM>
theta(V^2)
</VERBATIM>
---+++!! Brief explanation
<VERBATIM>
Lets take the triangle (A,B,C) for an example

the matrix would then be:
   A'  B'  C'
A  0   1   1

B  1   0   1

C  1   1   0

We either go through the vertical A,B,C and sum all their components (A',B',C') and return the max, this will take theta(V^2) time.
max(sum(A(A',B',C'),B(A',B',C'),C(A',B',C')).
</VERBATIM>
---++!! Grader comments *[/30]*
<VERBATIM>Question 1 Results:

Total Grade: 27

	10        		
	7         		In some cases, you will have O(V+E) which could be greater than O(V)
	10        		


</VERBATIM>

---+ Problem 2.  Graph algorithms *[20 points]*
---++ a
<VERBATIM>
initiate empty set Blue
initiate empty set Red
Enqueue S => Q
head(Q) => set Blue
while Q not empty
	h = head(Q)
	if h is in Blue or Red
		for each naighbor(n) of h
			if n already in same set as h, return: not bipartite!
			else
			Put n in oppisite set of h		
			Enqueue n
		Dequeue h
if Q empty, return: bipartite!
</VERBATIM>
---++ b
<VERBATIM>
Enqueue S
While Q is not empty
	h = head(Q)
	for each neighbor(n) of h
		if n is white
			color n gray
			Enqueue n
		if n is gray
			return: cycle found!
	Dequeue h
	color h black
</VERBATIM>
---++!! Grader comments *[/20]*
<VERBATIM>Question 2 Results:

Total Grade: 20

	10        		
	10        		


</VERBATIM>

---+ Problem 3.  Graph implementation *[20 points]*
---++ 3a.
Attach your solutions to this topic.
---++ 3b.
Attach your solutions to this topic.

---++!! Grader comments *[/20]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---+ Problem 4.  Simplified Chess *[30 points]*
---++ 4a
---+++ i.
<VERBATIM>
Provide your answer here.
</VERBATIM>
---+++ ii.  
<VERBATIM>
Provide your answer here.
</VERBATIM>

---++ 4b.  Main task [20 points]
Provide a description of your approach here.  Upload your code online.

---++!! Grader comments *[/30]*
<VERBATIM>
Reserved for the grader
</VERBATIM>
---
