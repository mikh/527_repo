---+EC330 - Spring 2015 - Homework 4
%TOC%

---++_Assigned:_  Thursday, March 5
---++_Due:_  Thursday, March 19 _by the beginning of class._
<!--
PHI1=6..15
PHI2=2..4
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(DereckFagundes),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(2+$MOD(%PHI%,3))}%
-->
---++!! Total grade *[100/100]*
---++ Problem 1 - Hashing
<VERBATIM>
II. Seconday Clustering
</VERBATIM>
---+++!! Grader comments *[25/25]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---++ Problem 2 - Selection 

---+++ i. Median of two
---++++ Algorithm
<VERBATIM>
Median(X0,X1)
    median1 = X0[n/2]
    median2 = X1[n/2]
    if median1 == median2
        return median1

    if X0.length > 2
         
         if median1 > median2
              X0 = X0[0...n/2]
              X1 = X1[n/2....n-1]
              Median(X0,X1)
        
         if median2 > median1
              X0 = X0[n/2...n-1]
              X1 = X1[0......n/2]
              Median(X0,X1)
    
median = (max(X0[0],X1[0]) + min(X0[1],X1[1]))/2
</VERBATIM>

---++++ Analysis and running time
<VERBATIM>
it will take O(log(n)) because the given array needs to be divide log(n) times to get to size 2
</VERBATIM>

---+++ ii. Median of three
---++++ Algorithm
<VERBATIM>
Median(X0,X1,X2)

int x,y,z = 0;

      for i=0 to n/2
               if X0(x) < (X1(y) & X2(z))
                       x++
               if X1(y) < (X0(x) & X2(z))
                       y++
               if X2(z) < (X0(x) & X1(y))
                       z++
 
      if x > (y&z) 
             median = X0(x)
      if y > (x&z)
             median = X1(y)
      if z > (x&y)
             median = X2(z)


</VERBATIM>

---++++ Analysis and running time
<VERBATIM>
it will take theta(n) times because it goes through n/2 tiimes every time regardless of the situation
</VERBATIM>

---+++ iii. Median of n
---++++ Algorithm
<VERBATIM>
Give out answer here.
</VERBATIM>

---++++ Analysis and running time
<VERBATIM>
Give out answer here.
</VERBATIM>

---+++!! Grader comments *[25/25]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---++ Problem 3 - Bloom filters *[25 points]*
---+++ Code
%CODE{"cpp"}%

#include "myBloomFilter.h"

myBloomFilter::myBloomFilter (int mm){
    for(int r=0;r<mm;r++){
        hashVector.push_back(0);
    }
    length = mm;
}

myBloomFilter::myBloomFilter (string filter){
    length = filter.length();
    for (int r=0;r<filter.length();r++){
        hashVector.push_back(0);
    }
}

int myBloomFilter::firstHash(string item){
    stringstream convert;
    int param;
    convert << item;
    convert >> param;
    return param % length;
}

int myBloomFilter::secondHash(string item){
    int param = 0;
    int numeral = 757;
    for(int i = 0; i < item.length(); i++)
    {
        param = (param * numeral) + item[i];
    }
    return param % length;
}

int myBloomFilter::thirdHash(string item){
    int param = 0;
    for (int r = 0; r < item.length(); r++)
        param = param + int(item[r]);
    return param % length;
}

bool myBloomFilter::exists(string item){
    if((hashVector.at(firstHash(item)) == 1) && (hashVector.at(secondHash(item)) == 1) && (hashVector.at(thirdHash(item)) == 1)){
        return true;
    }
    else{
        return false;
    }
}

void myBloomFilter::insert(string item){
    hashVector.at(firstHash(item)) = 1;
    hashVector.at(secondHash(item)) = 1;
    hashVector.at(thirdHash(item)) = 1;
}

string myBloomFilter::output(){
    return "a";
}

%ENDCODE%

---+++ Explanation
<VERBATIM>
firstHash converts the string to int and then mods its length
secondHash sums the integer values of the string and multiplies by a constant and mods by length
thirdHash is same as secondHash without multiplication by a constant

bloomfilter uses a vector and the returns from the hash as indexes in the vector
</VERBATIM>

---+++!! Grader comments *[0/25]*
<VERBATIM>
Score: 1000</VERBATIM>

---++ Problem 4 - Password cracking

---+++ 4a.  Brute force 
<VERBATIM>
EBI
tig
sb.
Ruy
MTF
sea
sip
cog
fub
MeV
</VERBATIM>

---+++ 4b. Simplified rainbow tables
<VERBATIM>
PSlE)
`HnRq

</VERBATIM>

---+++ 4c.  Build your own simplified rainbow table *[10 points]*
<VERBATIM>
i hash reduce 100 times the password and then store it. to get the next password i hash reduce an extra time and use that 5 digits as the next password. i do that 100 times to get a rainbow table of length 100
</VERBATIM>

---+++!! Grader comments *[25/25]*
<VERBATIM>
Reserved for the grader
</VERBATIM>
---
