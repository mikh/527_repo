---+EC330 - Spring 2015 - Homework 4
%TOC%

---++_Assigned:_  Thursday, March 5
---++_Due:_  Thursday, March 19 _by the beginning of class._
<!--
PHI1=6..15
PHI2=2..4
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(SparshKumar),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(2+$MOD(%PHI%,3))}%
-->
---++!! Total grade *[100/100]*
---++ Problem 1 - Hashing
<VERBATIM>
Expand h4(k) as an example:
h4(k) : h4(k) = h3(k) + 4
h3(k) = h2(k) + 3
h2(k) = h1(k) + 2
h1(k) = h0(k) + 1
h0(k) = h(k)

Therefore h4(k) = h(k) + 1 + 2 + 3 + 4

hi(k) can be represented as:
hi(k) = h(k) + 1 + 2 + ... + (i - 1) + 1 = h(k) + sum from 0 to i of i = h(k) + (i/2)*(i + 1)

i. No. Since this is a quadratic probe it will not exhibit primary clustering.

ii. Yes, hi(k) may exhibit secondary clustering. As show below for hash tables with 3 slots and 5 slots, 
secondary clustering occurs around 0 and 1 for the 3 slot hash table and around 0,1,and 3 for the 5 slot hash table

i           offset                        mod 3          mod 5
0          (0/2)*(1 + 0) = 0                0              0
1          (1/2)*(1 + 1) = 1                1              1              
2          (2/2)*(1 + 2) = 3                0              3
3          (3/2)*(1 + 3) = 6                0              1
4          (4/2)*(1 + 4) = 10               1              0
5          (5/2)*(1 + 5) = 15               0              0
6          (6/2)*(1 + 6) = 21               0              1
7          (7/2)*(1 + 7) = 28               1              3
8          (8/2)*(1 + 8) = 36               0              1

iii. No. There is no guarantee that the hash will allow us to fill every slot in the table with a quadratic probe. 
In the table above, neither the 3 slot hash table or 5 slot hash table will allow for slot 2 to be filled. 



</VERBATIM>
---+++!! Grader comments *[25/25]*
<VERBATIM>
Reserved for the grader
</VERBATIM>

---++ Problem 2 - Selection 

---+++ i. Median of two
---++++ Algorithm
<VERBATIM>
//The calcMedian function will determine the median of any given sorted array

int calcMedian(int arrayA[], int size)
{
    if (size%2 == 0)
    {
        return (arrayA[(size)/2] + arrayA[(size+1)/2]) / 2 
        //If the array size is even, then take add two middle values and divide them by 2
    }
    else
    {
        return arrayA[(size+1)/2];
        //If the array size is odd, then return the middle value         
    }
}

int findMedian(int arrayX0[], int arrayX1[], int size)
{
    if(size == 1)
        return ((arrayX0[0]+arrayX1[0])/2)
    
    if(size == 2)
        return (max(arrayX0[0],arrayX1[0])+min(arrayX0[0],arrayX1[0]))/2;
    
    int medX0 = calcMedian(arrayX0, size)
    
    int medX1 = calcMedian(arrayX1, size);    
    
    if(medX0 == medX1)  //If the medians are equal, return one of them
        return medX0;
    
    if(medX0 > medX1) //Indicates the median is in the lower half of ArrayX0 and the upper half of ArrayX1
    {
        if (size%2 == 0)  //Check if even or odd
        {
            findMedian(arrayX0,&arrayX1[(size/2-1)],(size/2+1)); //Adjust size because array elements start with 0
        }
        else {
            findMedian(arrayX0,&arrayX1[(size/2)],(size/2));
        }
    }
    else  //Indicates the median is in the upper half of ArrayX0 and the lower half of ArrayX1
    {
        if (size%2 == 0) 
        {
            findMedian(&arrayX0[(size/2-1)],arrayX1,(size/2+1));         
        }
        else {
            findMedian(&arrayX0[(size/2)],arrayX1,(size/2));
        }
    }
}
</VERBATIM>

---++++ Analysis and running time
<VERBATIM>
The running time for the above algorithm is Theta(lg n) where n is the size of both arrays. 
In the worst case, both arrays must be divided in half until just 4 numbers are left in the array. 
Then at this point, the if the size is 2, the terminating condition will solve for the median. 
This means there will be lg(n)-1 levels which simplifies to a running time of lg(n). 
The other operations such as calculating the median within each level are constant time because the arrays are sorted. 
</VERBATIM>

---+++ ii. Median of three
---++++ Algorithm
<VERBATIM>
//The calcMedian function will determine the median of any given sorted array

int calcMedian(int arrayA[], int size)
{
    if (size%2 == 0)
    {
        return (arrayA[(size)/2] + arrayA[(size+1)/2]) / 2 
        //If the array size is even, then take add two middle values and divide them by 2
    }
    else
    {
        return arrayA[(size+1)/2];
        //If the array size is odd, then return the middle value         
    }
}

int findMedian(int arrayx[], int arrayy[], int arrayz[], int size)
{
//Midx, Midy and Midz are the indices of the middle elements of array x, y and z respectively.
//Len is the total number of elements in the three array left.

Midx = calcMedian(int arrayx[], int size)
Midy = calcMedian(int arrayy[], int size)
Midz = calcMedian(int arrayz[], int size)

lx=ly=lz=0 
ux=uy=uz=n 
Len=n+n+n=3n

let k = the median if Len is odd
if its even, find the middle two vales and store them in x0 and x1

execute this loop until you have either 2 or 1 element left
{
loop:
    if k<=Len/2 

/*That is, the element being found is in the left side of the median of Len elements.
So we think of the right sides of the three arrays as the candidate to be eliminated*/

        maxvalue=Max(x[Midx], y[Midy], z[Midz])
        if(maxvalue==x[Midx])
            Len=Len-(ux-Midx)
            ux=Midx
            Midx=(lx+ux)/2
        else if(maxvalue==y[Midy])
            Len=Len-(uy-Midy)
            uy=Midy
            Midy=(ly+uy)/2
        else if(maxvalue==z[Midz])
            Len=Len-(uz-Midz)
            uz=Midz
            Midz=(lz+uz)/2
        
    
    if k>Len/2 
/*That is, the element being found is in the right side of the median of Len elements.
So we think of the left sides of the three arrays as the candidate to be eliminated*/
        minvalue=Min(x[Midx], y[Midy], z[Midz])
        if(minvalue==x[Midx])
            Len=Len-(Midx-lx)
            k=k-(Midx-lx)
            lx=Midx
            Midx=(lx+ux)/2
        else if(minvalue==y[Midy])
            Len=Len-(Midy-ly)
            k=k-(Midy-ly)
            ly=Midy
            Midy=(ly+uy)/2
        else if(minvalue==z[Midz])
            Len=Len-(Midz-lz)
            k=k-(Midz-lz)
            lz=Midz
            Midz=(lz+uz)/2
        //Here, we have to notice that "kth" is updated 
        
}
end loop

if you have one element left, return it
if you have two elements left, return x0 + x1 / 2


}




</VERBATIM>

---++++ Analysis and running time
<VERBATIM>
Given that I have three arrays involved, I basically run a loop where I eliminate half the numbers in an array until I reach one element.
If we need to find one value, then the loop will continue until there is one final value.
If two values are needed, then the loop sequence will run twice and then will find the median based off the two numbers
Therefore, the function will run in Theta of logn

</VERBATIM>

---+++ iii. Median of n
---++++ Algorithm
<VERBATIM>
int calcMedian(int arrayA[], int size)
{
    if (size%2 == 0)
    {
        return (arrayA[(size)/2] + arrayA[(size+1)/2]) / 2 
        //If the array size is even, then take add two middle values and divide them by 2
    }
    else
    {
        return arrayA[(size+1)/2];
        //If the array size is odd, then return the middle value         
    }
}

int findMedian(int arrayx[], int arrayy[], ......, int size)
{


Midx = calcMedian(int arrayx[], int size)
Midy = calcMedian(int arrayy[], int size)
Midz = .....

lx=ly=lz=0 ....
ux=uy=uz=n ....
Len=n+n+n + .....=(number of arrays)*(size of array) .....

let k = the median if Len is odd
if its even, find the middle two vales and store them in x0 and x1

execute this loop until you have either 2 or 1 element left
{
loop:
    if k<=Len/2 

/*That is, the element being found is in the left side of the median of Len elements.
So we think of the right sides of the three arrays as the candidate to be eliminated*/

        maxvalue=Max(x[Midx], y[Midy]....)
        if(maxvalue==x[Midx])
            Len=Len-(ux-Midx)
            ux=Midx
            Midx=(lx+ux)/2
        else if(maxvalue==y[Midy])
            Len=Len-(uy-Midy)
            uy=Midy
            Midy=(ly+uy)/2
        else if(....)
        
    
    if k>Len/2 
/*That is, the element being found is in the right side of the median of Len elements.
So we think of the left sides of the three arrays as the candidate to be eliminated*/
        minvalue=Min(x[Midx], y[Midy], .....])
        if(minvalue==x[Midx])
            Len=Len-(Midx-lx)
            k=k-(Midx-lx)
            lx=Midx
            Midx=(lx+ux)/2
        else if(minvalue==y[Midy])
            Len=Len-(Midy-ly)
            k=k-(Midy-ly)
            ly=Midy
            Midy=(ly+uy)/2
        else if(....)
        //Here, we have to notice that "kth" is updated 
        
}
end loop

if you have one element left, return it
if you have two elements left, return x0 + x1 / 2


}

</VERBATIM>

---++++ Analysis and running time
<VERBATIM>
Given that I have x arrays involved, I basically run a loop where I eliminate half the numbers in an array until I reach one element.
If we need to find one value, then the loop will continue until there is one final value.
If two values are needed, then the loop sequence will run twice and then will find the median based off the two numbers
Therefore, the function will run in Theta of nlogn because there can be multiple arrays involved
</VERBATIM>

---+++!! Grader comments *[25/25]*
<VERBATIM>Question 2 Results:

Total Grade: 25

	10        		
	8         		
	7         		


</VERBATIM>

---++ Problem 3 - Bloom filters *[25 points]*
---+++ Code
%CODE{"cpp"}%

#include "myBloomFilter.h"


void myBloomFilter::insert(string item)
{

this->bloom_filter.erase((length - item.length()), item.length());
this->bloom_filter.append(item);

}

bool myBloomFilter::exists(string item)
{
if (this->output().find(item) != string::npos) {
    return false;
}
else
	return true;
}


string myBloomFilter::output()
{
return bloom_filter;
}

myBloomFilter::myBloomFilter (int mm)
{
this->length = mm;
}


myBloomFilter::myBloomFilter (string filter)
{
this->bloom_filter = filter;
this->length = bloom_filter.length();
}

%ENDCODE%

---+++ Explanation
<VERBATIM>
I basically make one variable bloom_filter which stores all the strings in the filter. 
The insert function will replace some elements of the bloom_filter string.
The exist function will go through the bloom_filter string, and will determine if the string
exists in the bloom_filter string variable.

This program initially worked in the simulator, but now its not. 
I don't know what happened, but the score shows that it was working. 
As of now this is the old code, and if you want to disregard my highest score
then that is fine.
</VERBATIM>

---+++!! Grader comments *[0/25]*
<VERBATIM>
No score found</VERBATIM>

---++ Problem 4 - Password cracking

---+++ 4a.  Brute force 
<VERBATIM>
The password of a4f5c236224a3abe25c7dfc8d59fc0d572d27e1b is: QKt
The password of 770c46bf00a86db695a9bacf3e041553448e15cb is: Saw
The password of c26a7dd817239c66e24a3aedc4288bffd3d32648 is: Rom
The password of 0b47caaa066a28e5a1ec7509db838a9a228bb83f is: NRO
The password of ce5fadf6ef646c567c7eb4a47df0703568e71f15 is: prs
The password of 9dd06c3f4413fd8d4946f819e62d15e7d500d3bc is: M-1
The password of adb9b27c9d0f78e1e104007e56cd3ce6b48456a7 is: RFP
The password of 2adee50a101f6a2bc3d14eb04bd1b60f3b719c36 is: pup
The password of ceab7606dfe83f9b44fc18f654ed77d8c830c462 is: ufo
The password of ee6ded4fb1b29dae5c1b3a0ea976c2563564dc16 is: wim
</VERBATIM>

---+++ 4b. Simplified rainbow tables
<VERBATIM>
cdd89c1fd6b1dd918ecd55b81c883dfac5f944fa        Swart
0d87fd05ab773e3fef729295b84adcfa57461fb1        Fredi 
21b8e0029acd0891cdbaaa028a41b4229e9359f3        Pieta
cbd584f087cd860fe9692f01e48e12a779f75e31        offal
570800e28781f99c6f94d33c0398239e39b0c3fa        musca
</VERBATIM>

---+++ 4c.  Build your own simplified rainbow table *[10 points]*
<VERBATIM>
See problem4c.zip for code
</VERBATIM>

---+++!! Grader comments *[25/25]*
<VERBATIM>
Reserved for the grader
</VERBATIM>
---
