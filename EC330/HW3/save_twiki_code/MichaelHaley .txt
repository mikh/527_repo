---+EC330 - Spring 2012 - Homework 3
%TOC%

---++_Assigned:_  Thursday, February 19
---++_Due:_  Thursday, February 26 _at the beginning of class._

<!--
   * Set PHI = %CALCULATE{$HEX2DEC($LEFTSTRING($HEXENCODE(MichaelHaley),7))}%
   * Set PHI1 = %CALCULATE{$EVAL(6+$MOD(%PHI%,10))}%
   * Set PHI2 = %CALCULATE{$EVAL(4+$MOD(%PHI%,3))}%
-->

---
---++ Problem 1 *[Strange Sorting, 25 points]*
---+++ 1a

<latex>
i) Result- [0,1,2,3,4,5,6,7,8,9,10,11]
</latex>

<latex>
ii) no
</latex>

<latex>
iii) </latex> Counter example-  <latex> oneB([3,9,5,7,1,88,66,14,13,17,16])  </latex>       produces       <latex>[3,9,5,7,1,13,66,14,16,17,88]
</latex>


---++++ !!Result
<VERBATIM>
The result when the algorithm is run on the given array
</VERBATIM>

---++++ !!Correctly sort
<VERBATIM>
Yes or no
</VERBATIM>

---++++ !!Explanation & running time OR counterexample
<VERBATIM>
Put your answer here
</VERBATIM>

---+++ 1b
i) Result- [0,1,2,3,4,5,6,7,8,9,10,11]

ii) yes

iii) Loops through n elements, places smallest element in first index, calls itself, repeats for (ii+1) until sorted. Runtime- <latex> theta(n^2) </latex>



---++++ !!Result
<VERBATIM>
The result when the algorithm is run on the given array
</VERBATIM>

---++++ !!Correctly sort
<VERBATIM>
Yes or no
</VERBATIM>

---++++ !!Explanation & running time OR counterexample
<VERBATIM>
Put your answer here
</VERBATIM>

---+++ 1c

 i) Result- [0,1,2,3,4,5,6,7,8,9,10,11]

ii) yes

iii) Essentially performs a bubble sort across the array n times. Runtime- <latex> theta(n^2)</latex>
---++++ !!Result
<VERBATIM>
The result when the algorithm is run on the given array
</VERBATIM>

---++++ !!Correctly sort
<VERBATIM>
Yes or no
</VERBATIM>

---++++ !!Explanation & running time OR counterexample
<VERBATIM>
Put your answer here
</VERBATIM>

---+++ Grader comments *[25/25]*
<VERBATIM>
reserve for graders
</VERBATIM>

---++ Problem 2 *[Special-case sorting, 20 points]*
Provide _and analyze_ the most efficient algorithm you can for sorting an array of =n= items of the following type:
---+++ a. Integers in the range -%PHI% to %PHI% (inclusive).

Algorithm- Radix sort

Reason- For large arrays of integers radix sort will be the most efficient sort. 
---++++ !!Algorithm
<VERBATIM>
Put your answer here
</VERBATIM>

---++++ !!Analysis
<VERBATIM>
Put your answer here
</VERBATIM>

---+++ b. Strings of n^{ %CALCULATE{$EVAL(1000 + $MOD(%PHI%,2000))}% } - 1</latex> characters.

Algorithm- Radix sort

Reason- Here we have a string of fixed size- radix sort is highly successful when sorting this type. 
---++++ !!Algorithm
<VERBATIM>
Put your answer here
</VERBATIM>

---++++ !!Analysis
<VERBATIM>
Put your answer here
</VERBATIM>

---+++ Grader comments *[20/20]*
<VERBATIM>
reserve for graders
</VERBATIM>

---++ Problem 3 *[Constrained sorting, 25 points]*
---+++ Pseudocode
<VERBATIM>


//figure out what sum should be/what it is
//find difference

//find largest element
int eights = 1
    while(eights<n)
        eights*=8
sum=(eights)*((eights)/2) //summation of all elements (before removal of an element)

max = eights-1

maxDigits = 0 //find max number of digits
while(max!=0)
    max=max/10;
    maxDigits++

actualSum=0
tempNum
for ii=0 to eights-1 //find actual sum
    for jj=0 to maxDigits
        tempNum+=8*fetch(ii,jj)
    actualSum+=tempNum
    tempNum=0

missingNum = sum-actualSum //missing number is the difference
return missingNum


</VERBATIM>

---+++ Anaylsis
<VERBATIM>

Asymptotic running time of algorithm will  n^2. The algorithm is dominated by the for loop calling the fetch function (runtime n) for all n elements.. resulting in the n^2 runtime. 

</VERBATIM>

---+++ Grader comments  *[25/25]*
<VERBATIM>
reserve for graders
</VERBATIM>

---++ Problem 4 *[Big Sorting, 30 points]*
%CODE{"cpp"}%

   // Put your code here

%ENDCODE%

---+++ Grader comments  *[30/30]*
<VERBATIM>
reserve for graders
</VERBATIM>
---

TWIKIFILEEND
