%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-------------------------------------------
Simplest method of getting timing is with the shell-level "time" command.
This gets invoked simply by typing "time" before the rest of the command line.

$ time ./test_timers

real    0m0.993s
user    0m0.989s
sys     0m0.002s

For multithreaded programs ... ?!???  We will come back to this later in the semester.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
To measure time intervals WITHIN your code, there are serveral options:

times() -- elapsed time in ticks (what is a tick??)
gettimeofday() -- elapsed time in microseconds
RDTSC -- invokes the assembly language (intrinsic) rdtsc to get cycle count
      -- very low overhead, but requires calibration
clock_gettime() -- nanosecond resolution, substantial overhead.

Note the axes of variation:
-- what time is being measured?  user?  total?  system?  per thread?
-- resolution:  s?  ms?  us?  ns?
-- overhead
-- portability?  Is this machine or OS dependent?
-- reliable?  Does the returned value always mean the same thing?


See the sample program test_timers.c.

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
gettimeofday() --

#include <sys/time.h>
#include <time.h>

 int gettimeofday(struct timeval *tv, struct timezone *tz);

The functions gettimeofday() and settimeofday() can get and set the
time as well as a timezone.  The tv argument is a struct timeval (as
specified in <sys/time.h>):

 struct timeval {
        time_t       tv_sec;   /* seconds */
        suseconds_t  tv_usec;  /* microseconds */
 };

and gives the number of seconds and microseconds since the Epoch (see time(2)).

---------------
Code

inline double usecs_of_timeval(struct timeval * p_tv)
{
    return((double) p_tv->tv_sec) * 1e6 + ((double) p_tv->tv_usec);
}

  long int i, steps;
  double sec0, sec;	/* timing variables */
  struct timeval tv_start, tv_stop;

  printf("\n Hello World! Ticks = %d\n", CLK_TCK);
  gettimeofday(&tv_start, NULL);         // start timer
DO SOMETHING
  gettimeofday(&tv_stop, NULL);          // stop timer
  delta = usecs_of_timeval(&tv_stop) - usecs_of_timeval(&tv_start);
  printf("\n Time = %15.9f \n", delta/1000000);

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
times()    // a UNIX utility:  gets time in clock ticks

#include <sys/times.h>
clock_t times(struct tms *buf);  

DESCRIPTION -- The times() function stores the current process times in the
struct tms that buf points to. The struct tms is as defined in <sys/times.h>: 

struct tms {
 clock_t tms_utime;  /* user time */ 
 clock_t tms_stime;  /* system time */
 clock_t tms_cutime; /* user time of children */ 
 clock_t tms_cstime; /* system time of children */ 
};


---------------
Sample Code

double get_seconds() { 	/* routine to read time */
    struct tms rusage;
    times(&rusage);	/* UNIX utility: time in clock ticks */
    return (double)(rusage.tms_utime)/100; /* 100 tics per second? */
}

    double sec0, sec;	/* timing variables */

    sec0 = get_seconds();		/* start timer */
DO SOMETHING
    sec = (get_seconds() - sec0);	/* - overhead */
    printf("\n Seconds = %14.8f \n", sec);


------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
RDTSC -- Read Time Stamp Counter -- returns the number of clock cycles since
	the CPU was powered up or reset.  RDTSC is a two byte instruction - 0F 31 
	- and it returns a 64-bit count in EDX:EAX. 

Early on RDTSC was reported as a god-send -- Intel had finally provided a cycle
counter.  But this state of affairs didn't last long:  soon out-of-order execution
and so on made fine-grained counting not all that useful.  Still, it seems useful
for benchmarking if used to average non-trivial code executions.  But even here
there are complications:

>>rdtsc is not good for time measurement.
>>The problem is, that the CPU might throttle (with it does most of the time, when
>>all processes are blocked), so a cpu clock might mean more time in that case.
>>This is of course CPU and OS dependant.


---------------
Code

typedef union {
  unsigned long long int64;
  struct {unsigned int lo, hi;} int32;
} tsc_counter;

#define RDTSC(cpu_c)              \
  __asm__ __volatile__ ("rdtsc" : \
  "=a" ((cpu_c).int32.lo),        \
  "=d"((cpu_c).int32.hi))

  long long int delta_int;

  RDTSC(t_0);
DO SOMETHING
  RDTSC(t_1);
  delta_int = t_1.int64-t_0.int64;


---------------

Granularity:  6  (6 whats?  Cycles?  I don't know, but that's it)

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------
clock_gettime()

Perhaps the best way to do fine-grained timing on LINUX systems.  There are
a number of clock options -- we use CLOCK_PROCESS_CPUTIME_ID here.  Some users
complain about high overhead (250ns ?), but I've found (so far) that this is
not much of a problem for controllable studies.  That is, experiments where you
can subtract off overhead of all kinds.

Note -- you need to link using -lrt.

--------------
Code (partial)

#include <time.h>

#define SIZE 10000000

// in time.h
struct timespec {
  time_t tv_sec; /* seconds */
  long tv_nsec;  /* nanoseconds */
};

  struct timespec time1;
  int clock_gettime(clockid_t clk_id, struct timespec *tp);

  // read the clock
  clock_gettime(CLOCK_PROCESS_CPUTIME_ID, &time1);

-----------------

Granularity:  nanoseconds

-------------------------------------------------------------------------------------




















